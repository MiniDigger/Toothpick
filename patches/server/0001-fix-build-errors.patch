From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: ysl3000 <yannicklamprecht@live.de>
Date: Sat, 23 May 2020 18:20:28 +0200
Subject: [PATCH] fix-build-errors


diff --git a/src/main/java/net/minecraft/core/dispenser/DispenseItemBehavior.java b/src/main/java/net/minecraft/core/dispenser/DispenseItemBehavior.java
index fd74305dcd35e047be12ee1fc0b5edd617395c14..f3c21e83be063656c076702bd97a94e080b4764e 100644
--- a/src/main/java/net/minecraft/core/dispenser/DispenseItemBehavior.java
+++ b/src/main/java/net/minecraft/core/dispenser/DispenseItemBehavior.java
@@ -90,7 +90,7 @@ public interface DispenseItemBehavior {
     ItemStack dispense(BlockSource isourceblock, ItemStack itemstack);
 
     static void bootStrap() {
-        DispenserBlock.registerBehavior((ItemLike) Items.ARROW, (DispenseItemBehavior) (new AbstractProjectileDispenseBehavior() {
+        DispenserBlock.registerBehavior(Items.ARROW, new AbstractProjectileDispenseBehavior() {
             @Override
             protected Projectile getProjectile(Level world, Position iposition, ItemStack itemstack) {
                 Arrow entitytippedarrow = new Arrow(world, iposition.x(), iposition.y(), iposition.z());
@@ -98,8 +98,8 @@ public interface DispenseItemBehavior {
                 entitytippedarrow.pickup = AbstractArrow.Pickup.ALLOWED;
                 return entitytippedarrow;
             }
-        }));
-        DispenserBlock.registerBehavior((ItemLike) Items.TIPPED_ARROW, (DispenseItemBehavior) (new AbstractProjectileDispenseBehavior() {
+        });
+        DispenserBlock.registerBehavior(Items.TIPPED_ARROW, new AbstractProjectileDispenseBehavior() {
             @Override
             protected Projectile getProjectile(Level world, Position iposition, ItemStack itemstack) {
                 Arrow entitytippedarrow = new Arrow(world, iposition.x(), iposition.y(), iposition.z());
@@ -108,8 +108,8 @@ public interface DispenseItemBehavior {
                 entitytippedarrow.pickup = AbstractArrow.Pickup.ALLOWED;
                 return entitytippedarrow;
             }
-        }));
-        DispenserBlock.registerBehavior((ItemLike) Items.SPECTRAL_ARROW, (DispenseItemBehavior) (new AbstractProjectileDispenseBehavior() {
+        });
+        DispenserBlock.registerBehavior(Items.SPECTRAL_ARROW, new AbstractProjectileDispenseBehavior() {
             @Override
             protected Projectile getProjectile(Level world, Position iposition, ItemStack itemstack) {
                 SpectralArrow entityspectralarrow = new SpectralArrow(world, iposition.x(), iposition.y(), iposition.z());
@@ -117,27 +117,27 @@ public interface DispenseItemBehavior {
                 entityspectralarrow.pickup = AbstractArrow.Pickup.ALLOWED;
                 return entityspectralarrow;
             }
-        }));
-        DispenserBlock.registerBehavior((ItemLike) Items.EGG, (DispenseItemBehavior) (new AbstractProjectileDispenseBehavior() {
+        });
+        DispenserBlock.registerBehavior(Items.EGG, new AbstractProjectileDispenseBehavior() {
             @Override
             protected Projectile getProjectile(Level world, Position iposition, ItemStack itemstack) {
-                return (Projectile) Util.make((new ThrownEgg(world, iposition.x(), iposition.y(), iposition.z())), (entityegg) -> { // CraftBukkit - decompile error
+                return Util.make((new ThrownEgg(world, iposition.x(), iposition.y(), iposition.z())), (entityegg) -> { // CraftBukkit - decompile error
                     entityegg.setItem(itemstack);
                 });
             }
-        }));
-        DispenserBlock.registerBehavior((ItemLike) Items.SNOWBALL, (DispenseItemBehavior) (new AbstractProjectileDispenseBehavior() {
+        });
+        DispenserBlock.registerBehavior(Items.SNOWBALL, new AbstractProjectileDispenseBehavior() {
             @Override
             protected Projectile getProjectile(Level world, Position iposition, ItemStack itemstack) {
-                return (Projectile) Util.make((new Snowball(world, iposition.x(), iposition.y(), iposition.z())), (entitysnowball) -> { // CraftBukkit - decompile error
+                return Util.make((new Snowball(world, iposition.x(), iposition.y(), iposition.z())), (entitysnowball) -> { // CraftBukkit - decompile error
                     entitysnowball.setItem(itemstack);
                 });
             }
-        }));
-        DispenserBlock.registerBehavior((ItemLike) Items.EXPERIENCE_BOTTLE, (DispenseItemBehavior) (new AbstractProjectileDispenseBehavior() {
+        });
+        DispenserBlock.registerBehavior(Items.EXPERIENCE_BOTTLE, new AbstractProjectileDispenseBehavior() {
             @Override
             protected Projectile getProjectile(Level world, Position iposition, ItemStack itemstack) {
-                return (Projectile) Util.make((new ThrownExperienceBottle(world, iposition.x(), iposition.y(), iposition.z())), (entitythrownexpbottle) -> { // CraftBukkit - decompile error
+                return Util.make((new ThrownExperienceBottle(world, iposition.x(), iposition.y(), iposition.z())), (entitythrownexpbottle) -> { // CraftBukkit - decompile error
                     entitythrownexpbottle.setItem(itemstack);
                 });
             }
@@ -151,14 +151,14 @@ public interface DispenseItemBehavior {
             protected float getPower() {
                 return super.getPower() * 1.25F;
             }
-        }));
-        DispenserBlock.registerBehavior((ItemLike) Items.SPLASH_POTION, new DispenseItemBehavior() {
+        });
+        DispenserBlock.registerBehavior(Items.SPLASH_POTION, new DispenseItemBehavior() {
             @Override
             public ItemStack dispense(BlockSource isourceblock, ItemStack itemstack) {
                 return (new AbstractProjectileDispenseBehavior() {
                     @Override
                     protected Projectile getProjectile(Level world, Position iposition, ItemStack itemstack1) {
-                        return (Projectile) Util.make((new ThrownPotion(world, iposition.x(), iposition.y(), iposition.z())), (entitypotion) -> { // CraftBukkit - decompile error
+                        return Util.make((new ThrownPotion(world, iposition.x(), iposition.y(), iposition.z())), (entitypotion) -> { // CraftBukkit - decompile error
                             entitypotion.setItem(itemstack1);
                         });
                     }
@@ -175,13 +175,13 @@ public interface DispenseItemBehavior {
                 }).dispense(isourceblock, itemstack);
             }
         });
-        DispenserBlock.registerBehavior((ItemLike) Items.LINGERING_POTION, new DispenseItemBehavior() {
+        DispenserBlock.registerBehavior(Items.LINGERING_POTION, new DispenseItemBehavior() {
             @Override
             public ItemStack dispense(BlockSource isourceblock, ItemStack itemstack) {
                 return (new AbstractProjectileDispenseBehavior() {
                     @Override
                     protected Projectile getProjectile(Level world, Position iposition, ItemStack itemstack1) {
-                        return (Projectile) Util.make((new ThrownPotion(world, iposition.x(), iposition.y(), iposition.z())), (entitypotion) -> { // CraftBukkit - decompile error
+                        return Util.make((new ThrownPotion(world, iposition.x(), iposition.y(), iposition.z())), (entitypotion) -> { // CraftBukkit - decompile error
                             entitypotion.setItem(itemstack1);
                         });
                     }
@@ -201,7 +201,7 @@ public interface DispenseItemBehavior {
         DefaultDispenseItemBehavior dispensebehavioritem = new DefaultDispenseItemBehavior() {
             @Override
             public ItemStack execute(BlockSource isourceblock, ItemStack itemstack) {
-                Direction enumdirection = (Direction) isourceblock.getBlockState().getValue(DispenserBlock.FACING);
+                Direction enumdirection = isourceblock.getBlockState().getValue(DispenserBlock.FACING);
                 EntityType<?> entitytypes = ((SpawnEggItem) itemstack.getItem()).getType(itemstack.getTag());
 
                 // CraftBukkit start
@@ -224,7 +224,7 @@ public interface DispenseItemBehavior {
                     itemstack.grow(1);
                     // Chain to handler for new item
                     ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-                    DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+                    DispenseItemBehavior idispensebehavior = DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
                     if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != this) {
                         idispensebehavior.dispense(isourceblock, eventStack);
                         return itemstack;
@@ -232,7 +232,7 @@ public interface DispenseItemBehavior {
                 }
 
                 try { // Paper
-                entitytypes.spawn(isourceblock.getLevel(), itemstack, (Player) null, isourceblock.getPos().relative(enumdirection), MobSpawnType.DISPENSER, enumdirection != Direction.UP, false);
+                entitytypes.spawn(isourceblock.getLevel(), itemstack, null, isourceblock.getPos().relative(enumdirection), MobSpawnType.DISPENSER, enumdirection != Direction.UP, false);
                     // Paper start
                 } catch (Exception ex){
                     MinecraftServer.LOGGER.warn("An exception occurred dispensing entity at {}[{}]", world.getWorld().getName(), isourceblock.getPos(), ex);
@@ -249,13 +249,13 @@ public interface DispenseItemBehavior {
         while (iterator.hasNext()) {
             SpawnEggItem itemmonsteregg = (SpawnEggItem) iterator.next();
 
-            DispenserBlock.registerBehavior((ItemLike) itemmonsteregg, (DispenseItemBehavior) dispensebehavioritem);
+            DispenserBlock.registerBehavior(itemmonsteregg, dispensebehavioritem);
         }
 
-        DispenserBlock.registerBehavior((ItemLike) Items.ARMOR_STAND, (DispenseItemBehavior) (new DefaultDispenseItemBehavior() {
+        DispenserBlock.registerBehavior(Items.ARMOR_STAND, new DefaultDispenseItemBehavior() {
             @Override
             public ItemStack execute(BlockSource isourceblock, ItemStack itemstack) {
-                Direction enumdirection = (Direction) isourceblock.getBlockState().getValue(DispenserBlock.FACING);
+                Direction enumdirection = isourceblock.getBlockState().getValue(DispenserBlock.FACING);
                 BlockPos blockposition = isourceblock.getPos().relative(enumdirection);
                 Level world = isourceblock.getLevel();
 
@@ -278,7 +278,7 @@ public interface DispenseItemBehavior {
                     itemstack.grow(1);
                     // Chain to handler for new item
                     ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-                    DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+                    DispenseItemBehavior idispensebehavior = DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
                     if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != this) {
                         idispensebehavior.dispense(isourceblock, eventStack);
                         return itemstack;
@@ -286,24 +286,24 @@ public interface DispenseItemBehavior {
                 }
                 // CraftBukkit end
 
-                ArmorStand entityarmorstand = new ArmorStand(world, (double) blockposition.getX() + 0.5D, (double) blockposition.getY(), (double) blockposition.getZ() + 0.5D);
+                ArmorStand entityarmorstand = new ArmorStand(world, (double) blockposition.getX() + 0.5D, blockposition.getY(), (double) blockposition.getZ() + 0.5D);
 
-                EntityType.updateCustomEntityTag(world, (Player) null, (Entity) entityarmorstand, itemstack.getTag());
+                EntityType.updateCustomEntityTag(world, null, entityarmorstand, itemstack.getTag());
                 entityarmorstand.yRot = enumdirection.toYRot();
                 world.addFreshEntity(entityarmorstand);
                 // itemstack.subtract(1); // CraftBukkit - Handled during event processing
                 return itemstack;
             }
-        }));
-        DispenserBlock.registerBehavior((ItemLike) Items.FIREWORK_ROCKET, (DispenseItemBehavior) (new DefaultDispenseItemBehavior() {
+        });
+        DispenserBlock.registerBehavior(Items.FIREWORK_ROCKET, new DefaultDispenseItemBehavior() {
             @Override
             public ItemStack execute(BlockSource isourceblock, ItemStack itemstack) {
-                Direction enumdirection = (Direction) isourceblock.getBlockState().getValue(DispenserBlock.FACING);
-                double d0 = (double) enumdirection.getStepX();
-                double d1 = (double) enumdirection.getStepY();
-                double d2 = (double) enumdirection.getStepZ();
+                Direction enumdirection = isourceblock.getBlockState().getValue(DispenserBlock.FACING);
+                double d0 = enumdirection.getStepX();
+                double d1 = enumdirection.getStepY();
+                double d2 = enumdirection.getStepZ();
                 double d3 = isourceblock.x() + d0;
-                double d4 = (double) ((float) isourceblock.getPos().getY() + 0.2F);
+                double d4 = (float) isourceblock.getPos().getY() + 0.2F;
                 double d5 = isourceblock.z() + d2;
                 // CraftBukkit start
                 Level world = isourceblock.getLevel();
@@ -325,7 +325,7 @@ public interface DispenseItemBehavior {
                     itemstack.grow(1);
                     // Chain to handler for new item
                     ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-                    DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+                    DispenseItemBehavior idispensebehavior = DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
                     if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != this) {
                         idispensebehavior.dispense(isourceblock, eventStack);
                         return itemstack;
@@ -346,11 +346,11 @@ public interface DispenseItemBehavior {
             protected void playSound(BlockSource isourceblock) {
                 isourceblock.getLevel().levelEvent(1004, isourceblock.getPos(), 0);
             }
-        }));
-        DispenserBlock.registerBehavior((ItemLike) Items.FIRE_CHARGE, (DispenseItemBehavior) (new DefaultDispenseItemBehavior() {
+        });
+        DispenserBlock.registerBehavior(Items.FIRE_CHARGE, new DefaultDispenseItemBehavior() {
             @Override
-            public ItemStack lambda$static$0(BlockSource isourceblock, ItemStack itemstack) {
-                Direction enumdirection = (Direction) isourceblock.getBlockState().getValue(DispenserBlock.FACING);
+            public ItemStack execute(BlockSource isourceblock, ItemStack itemstack) {
+                Direction enumdirection = isourceblock.getBlockState().getValue(DispenserBlock.FACING);
                 Position iposition = DispenserBlock.getDispensePosition(isourceblock);
                 double d0 = iposition.x() + (double) ((float) enumdirection.getStepX() * 0.3F);
                 double d1 = iposition.y() + (double) ((float) enumdirection.getStepY() * 0.3F);
@@ -380,7 +380,7 @@ public interface DispenseItemBehavior {
                     itemstack.grow(1);
                     // Chain to handler for new item
                     ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-                    DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+                    DispenseItemBehavior idispensebehavior = DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
                     if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != this) {
                         idispensebehavior.dispense(isourceblock, eventStack);
                         return itemstack;
@@ -389,7 +389,7 @@ public interface DispenseItemBehavior {
 
                 SmallFireball entitysmallfireball = new SmallFireball(world, d0, d1, d2, event.getVelocity().getX(), event.getVelocity().getY(), event.getVelocity().getZ());
                 entitysmallfireball.setItem(itemstack1);
-                entitysmallfireball.projectileSource = new org.bukkit.craftbukkit.projectiles.CraftBlockProjectileSource((DispenserBlockEntity) isourceblock.getEntity());
+                entitysmallfireball.projectileSource = new org.bukkit.craftbukkit.projectiles.CraftBlockProjectileSource(isourceblock.getEntity());
 
                 world.addFreshEntity(entitysmallfireball);
                 // itemstack.subtract(1); // Handled during event processing
@@ -401,20 +401,20 @@ public interface DispenseItemBehavior {
             protected void playSound(BlockSource isourceblock) {
                 isourceblock.getLevel().levelEvent(1018, isourceblock.getPos(), 0);
             }
-        }));
-        DispenserBlock.registerBehavior((ItemLike) Items.OAK_BOAT, (DispenseItemBehavior) (new BoatDispenseItemBehavior(Boat.Type.OAK)));
-        DispenserBlock.registerBehavior((ItemLike) Items.SPRUCE_BOAT, (DispenseItemBehavior) (new BoatDispenseItemBehavior(Boat.Type.SPRUCE)));
-        DispenserBlock.registerBehavior((ItemLike) Items.BIRCH_BOAT, (DispenseItemBehavior) (new BoatDispenseItemBehavior(Boat.Type.BIRCH)));
-        DispenserBlock.registerBehavior((ItemLike) Items.JUNGLE_BOAT, (DispenseItemBehavior) (new BoatDispenseItemBehavior(Boat.Type.JUNGLE)));
-        DispenserBlock.registerBehavior((ItemLike) Items.DARK_OAK_BOAT, (DispenseItemBehavior) (new BoatDispenseItemBehavior(Boat.Type.DARK_OAK)));
-        DispenserBlock.registerBehavior((ItemLike) Items.ACACIA_BOAT, (DispenseItemBehavior) (new BoatDispenseItemBehavior(Boat.Type.ACACIA)));
+        });
+        DispenserBlock.registerBehavior(Items.OAK_BOAT, new BoatDispenseItemBehavior(Boat.Type.OAK));
+        DispenserBlock.registerBehavior(Items.SPRUCE_BOAT, new BoatDispenseItemBehavior(Boat.Type.SPRUCE));
+        DispenserBlock.registerBehavior(Items.BIRCH_BOAT, new BoatDispenseItemBehavior(Boat.Type.BIRCH));
+        DispenserBlock.registerBehavior(Items.JUNGLE_BOAT, new BoatDispenseItemBehavior(Boat.Type.JUNGLE));
+        DispenserBlock.registerBehavior(Items.DARK_OAK_BOAT, new BoatDispenseItemBehavior(Boat.Type.DARK_OAK));
+        DispenserBlock.registerBehavior(Items.ACACIA_BOAT, new BoatDispenseItemBehavior(Boat.Type.ACACIA));
         DefaultDispenseItemBehavior dispensebehavioritem1 = new DefaultDispenseItemBehavior() {
             private final DefaultDispenseItemBehavior b = new DefaultDispenseItemBehavior();
 
             @Override
             public ItemStack execute(BlockSource isourceblock, ItemStack itemstack) {
                 BucketItem itembucket = (BucketItem) itemstack.getItem();
-                BlockPos blockposition = isourceblock.getPos().relative((Direction) isourceblock.getBlockState().getValue(DispenserBlock.FACING));
+                BlockPos blockposition = isourceblock.getPos().relative(isourceblock.getBlockState().getValue(DispenserBlock.FACING));
                 Level world = isourceblock.getLevel();
 
                 // CraftBukkit start
@@ -439,7 +439,7 @@ public interface DispenseItemBehavior {
                     if (!event.getItem().equals(craftItem)) {
                         // Chain to handler for new item
                         ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-                        DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+                        DispenseItemBehavior idispensebehavior = DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
                         if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != this) {
                             idispensebehavior.dispense(isourceblock, eventStack);
                             return itemstack;
@@ -450,7 +450,7 @@ public interface DispenseItemBehavior {
                 }
                 // CraftBukkit end
 
-                if (itembucket.emptyBucket((Player) null, world, blockposition, (BlockHitResult) null)) {
+                if (itembucket.emptyBucket(null, world, blockposition, null)) {
                     itembucket.checkExtraContent(world, itemstack, blockposition);
                     // CraftBukkit start - Handle stacked buckets
                     Item item = Items.BUCKET;
@@ -469,19 +469,19 @@ public interface DispenseItemBehavior {
             }
         };
 
-        DispenserBlock.registerBehavior((ItemLike) Items.LAVA_BUCKET, (DispenseItemBehavior) dispensebehavioritem1);
-        DispenserBlock.registerBehavior((ItemLike) Items.WATER_BUCKET, (DispenseItemBehavior) dispensebehavioritem1);
-        DispenserBlock.registerBehavior((ItemLike) Items.SALMON_BUCKET, (DispenseItemBehavior) dispensebehavioritem1);
-        DispenserBlock.registerBehavior((ItemLike) Items.COD_BUCKET, (DispenseItemBehavior) dispensebehavioritem1);
-        DispenserBlock.registerBehavior((ItemLike) Items.PUFFERFISH_BUCKET, (DispenseItemBehavior) dispensebehavioritem1);
-        DispenserBlock.registerBehavior((ItemLike) Items.TROPICAL_FISH_BUCKET, (DispenseItemBehavior) dispensebehavioritem1);
-        DispenserBlock.registerBehavior((ItemLike) Items.BUCKET, (DispenseItemBehavior) (new DefaultDispenseItemBehavior() {
+        DispenserBlock.registerBehavior(Items.LAVA_BUCKET, dispensebehavioritem1);
+        DispenserBlock.registerBehavior(Items.WATER_BUCKET, dispensebehavioritem1);
+        DispenserBlock.registerBehavior(Items.SALMON_BUCKET, dispensebehavioritem1);
+        DispenserBlock.registerBehavior(Items.COD_BUCKET, dispensebehavioritem1);
+        DispenserBlock.registerBehavior(Items.PUFFERFISH_BUCKET, dispensebehavioritem1);
+        DispenserBlock.registerBehavior(Items.TROPICAL_FISH_BUCKET, dispensebehavioritem1);
+        DispenserBlock.registerBehavior(Items.BUCKET, new DefaultDispenseItemBehavior() {
             private final DefaultDispenseItemBehavior b = new DefaultDispenseItemBehavior();
 
             @Override
             public ItemStack execute(BlockSource isourceblock, ItemStack itemstack) {
                 Level world = isourceblock.getLevel();
-                BlockPos blockposition = isourceblock.getPos().relative((Direction) isourceblock.getBlockState().getValue(DispenserBlock.FACING));
+                BlockPos blockposition = isourceblock.getPos().relative(isourceblock.getBlockState().getValue(DispenserBlock.FACING));
                 BlockState iblockdata = world.getBlockState(blockposition);
                 Block block = iblockdata.getBlock();
 
@@ -509,7 +509,7 @@ public interface DispenseItemBehavior {
                         if (!event.getItem().equals(craftItem)) {
                             // Chain to handler for new item
                             ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-                            DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+                            DispenseItemBehavior idispensebehavior = DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
                             if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != this) {
                                 idispensebehavior.dispense(isourceblock, eventStack);
                                 return itemstack;
@@ -534,8 +534,8 @@ public interface DispenseItemBehavior {
                     return super.execute(isourceblock, itemstack);
                 }
             }
-        }));
-        DispenserBlock.registerBehavior((ItemLike) Items.FLINT_AND_STEEL, (DispenseItemBehavior) (new OptionalDispenseItemBehavior() {
+        });
+        DispenserBlock.registerBehavior(Items.FLINT_AND_STEEL, new OptionalDispenseItemBehavior() {
             @Override
             protected ItemStack execute(BlockSource isourceblock, ItemStack itemstack) {
                 Level world = isourceblock.getLevel();
@@ -556,7 +556,7 @@ public interface DispenseItemBehavior {
                 if (!event.getItem().equals(craftItem)) {
                     // Chain to handler for new item
                     ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-                    DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+                    DispenseItemBehavior idispensebehavior = DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
                     if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != this) {
                         idispensebehavior.dispense(isourceblock, eventStack);
                         return itemstack;
@@ -565,17 +565,17 @@ public interface DispenseItemBehavior {
                 // CraftBukkit end
 
                 this.success = true;
-                BlockPos blockposition = isourceblock.getPos().relative((Direction) isourceblock.getBlockState().getValue(DispenserBlock.FACING));
+                BlockPos blockposition = isourceblock.getPos().relative(isourceblock.getBlockState().getValue(DispenserBlock.FACING));
                 BlockState iblockdata = world.getBlockState(blockposition);
 
-                if (FlintAndSteelItem.canUse(iblockdata, (LevelAccessor) world, blockposition)) {
+                if (FlintAndSteelItem.canUse(iblockdata, world, blockposition)) {
                     // CraftBukkit start - Ignition by dispensing flint and steel
-                    if (!org.bukkit.craftbukkit.event.CraftEventFactory.callBlockIgniteEvent(world, blockposition, isourceblock.getPos()).isCancelled()) {
+                    if (!CraftEventFactory.callBlockIgniteEvent(world, blockposition, isourceblock.getPos()).isCancelled()) {
                         world.setBlockAndUpdate(blockposition, Blocks.FIRE.defaultBlockState());
                     }
                     // CraftBukkit end
                 } else if (FlintAndSteelItem.canLightCampFire(iblockdata)) {
-                    world.setBlockAndUpdate(blockposition, (BlockState) iblockdata.setValue(BlockStateProperties.LIT, true));
+                    world.setBlockAndUpdate(blockposition, iblockdata.setValue(BlockStateProperties.LIT, true));
                 } else if (iblockdata.getBlock() instanceof TntBlock) {
                     TntBlock.explode(world, blockposition);
                     world.removeBlock(blockposition, false);
@@ -583,19 +583,19 @@ public interface DispenseItemBehavior {
                     this.success = false;
                 }
 
-                if (this.success && itemstack.hurt(1, world.random, (ServerPlayer) null)) {
+                if (this.success && itemstack.hurt(1, world.random, null)) {
                     itemstack.setCount(0);
                 }
 
                 return itemstack;
             }
-        }));
-        DispenserBlock.registerBehavior((ItemLike) Items.BONE_MEAL, (DispenseItemBehavior) (new OptionalDispenseItemBehavior() {
+        });
+        DispenserBlock.registerBehavior(Items.BONE_MEAL, new OptionalDispenseItemBehavior() {
             @Override
-            protected ItemStack lambda$static$0(BlockSource isourceblock, ItemStack itemstack) {
+            protected ItemStack execute(BlockSource isourceblock, ItemStack itemstack) {
                 this.success = true;
                 Level world = isourceblock.getLevel();
-                BlockPos blockposition = isourceblock.getPos().relative((Direction) isourceblock.getBlockState().getValue(DispenserBlock.FACING));
+                BlockPos blockposition = isourceblock.getPos().relative(isourceblock.getBlockState().getValue(DispenserBlock.FACING));
                 // CraftBukkit start
                 org.bukkit.block.Block block = world.getWorld().getBlockAt(isourceblock.getPos().getX(), isourceblock.getPos().getY(), isourceblock.getPos().getZ());
                 CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemstack);
@@ -612,7 +612,7 @@ public interface DispenseItemBehavior {
                 if (!event.getItem().equals(craftItem)) {
                     // Chain to handler for new item
                     ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-                    DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+                    DispenseItemBehavior idispensebehavior = DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
                     if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != this) {
                         idispensebehavior.dispense(isourceblock, eventStack);
                         return itemstack;
@@ -622,7 +622,7 @@ public interface DispenseItemBehavior {
                 world.captureTreeGeneration = true;
                 // CraftBukkit end
 
-                if (!BoneMealItem.growCrop(itemstack, world, blockposition) && !BoneMealItem.growWaterPlant(itemstack, world, blockposition, (Direction) null)) {
+                if (!BoneMealItem.growCrop(itemstack, world, blockposition) && !BoneMealItem.growWaterPlant(itemstack, world, blockposition, null)) {
                     this.success = false;
                 } else if (!world.isClientSide) {
                     world.levelEvent(2005, blockposition, 0);
@@ -650,12 +650,12 @@ public interface DispenseItemBehavior {
 
                 return itemstack;
             }
-        }));
-        DispenserBlock.registerBehavior((ItemLike) Blocks.TNT, (DispenseItemBehavior) (new DefaultDispenseItemBehavior() {
+        });
+        DispenserBlock.registerBehavior(Blocks.TNT, new DefaultDispenseItemBehavior() {
             @Override
-            protected ItemStack lambda$static$0(BlockSource isourceblock, ItemStack itemstack) {
+            protected ItemStack execute(BlockSource isourceblock, ItemStack itemstack) {
                 Level world = isourceblock.getLevel();
-                BlockPos blockposition = isourceblock.getPos().relative((Direction) isourceblock.getBlockState().getValue(DispenserBlock.FACING));
+                BlockPos blockposition = isourceblock.getPos().relative(isourceblock.getBlockState().getValue(DispenserBlock.FACING));
                 // EntityTNTPrimed entitytntprimed = new EntityTNTPrimed(world, (double) blockposition.getX() + 0.5D, (double) blockposition.getY(), (double) blockposition.getZ() + 0.5D, (EntityLiving) null);
 
                 // CraftBukkit start
@@ -663,7 +663,7 @@ public interface DispenseItemBehavior {
                 org.bukkit.block.Block block = world.getWorld().getBlockAt(isourceblock.getPos().getX(), isourceblock.getPos().getY(), isourceblock.getPos().getZ());
                 CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemstack1);
 
-                BlockDispenseEvent event = new BlockDispenseEvent(block, craftItem.clone(), new org.bukkit.util.Vector((double) blockposition.getX() + 0.5D, (double) blockposition.getY(), (double) blockposition.getZ() + 0.5D));
+                BlockDispenseEvent event = new BlockDispenseEvent(block, craftItem.clone(), new org.bukkit.util.Vector((double) blockposition.getX() + 0.5D, blockposition.getY(), (double) blockposition.getZ() + 0.5D));
                 if (!DispenserBlock.eventFired) {
                    world.getServerOH().getPluginManager().callEvent(event);
                 }
@@ -677,40 +677,40 @@ public interface DispenseItemBehavior {
                     itemstack.grow(1);
                     // Chain to handler for new item
                     ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-                    DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+                    DispenseItemBehavior idispensebehavior = DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
                     if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != this) {
                         idispensebehavior.dispense(isourceblock, eventStack);
                         return itemstack;
                     }
                 }
 
-                PrimedTnt entitytntprimed = new PrimedTnt(world, event.getVelocity().getX(), event.getVelocity().getY(), event.getVelocity().getZ(), (LivingEntity) null);
+                PrimedTnt entitytntprimed = new PrimedTnt(world, event.getVelocity().getX(), event.getVelocity().getY(), event.getVelocity().getZ(), null);
                 // CraftBukkit end
 
                 world.addFreshEntity(entitytntprimed);
-                world.playSound((Player) null, entitytntprimed.getX(), entitytntprimed.getY(), entitytntprimed.getZ(), SoundEvents.TNT_PRIMED, SoundSource.BLOCKS, 1.0F, 1.0F);
+                world.playSound(null, entitytntprimed.getX(), entitytntprimed.getY(), entitytntprimed.getZ(), SoundEvents.TNT_PRIMED, SoundSource.BLOCKS, 1.0F, 1.0F);
                 // itemstack.subtract(1); // CraftBukkit - handled above
                 return itemstack;
             }
-        }));
+        });
         OptionalDispenseItemBehavior dispensebehaviormaybe = new OptionalDispenseItemBehavior() {
             @Override
-            protected ItemStack lambda$static$0(BlockSource isourceblock, ItemStack itemstack) {
+            protected ItemStack execute(BlockSource isourceblock, ItemStack itemstack) {
                 this.success = ArmorItem.dispenseArmor(isourceblock, itemstack);
                 return itemstack;
             }
         };
 
-        DispenserBlock.registerBehavior((ItemLike) Items.CREEPER_HEAD, (DispenseItemBehavior) dispensebehaviormaybe);
-        DispenserBlock.registerBehavior((ItemLike) Items.ZOMBIE_HEAD, (DispenseItemBehavior) dispensebehaviormaybe);
-        DispenserBlock.registerBehavior((ItemLike) Items.DRAGON_HEAD, (DispenseItemBehavior) dispensebehaviormaybe);
-        DispenserBlock.registerBehavior((ItemLike) Items.SKELETON_SKULL, (DispenseItemBehavior) dispensebehaviormaybe);
-        DispenserBlock.registerBehavior((ItemLike) Items.PLAYER_HEAD, (DispenseItemBehavior) dispensebehaviormaybe);
-        DispenserBlock.registerBehavior((ItemLike) Items.WITHER_SKELETON_SKULL, (DispenseItemBehavior) (new OptionalDispenseItemBehavior() {
+        DispenserBlock.registerBehavior(Items.CREEPER_HEAD, dispensebehaviormaybe);
+        DispenserBlock.registerBehavior(Items.ZOMBIE_HEAD, dispensebehaviormaybe);
+        DispenserBlock.registerBehavior(Items.DRAGON_HEAD, dispensebehaviormaybe);
+        DispenserBlock.registerBehavior(Items.SKELETON_SKULL, dispensebehaviormaybe);
+        DispenserBlock.registerBehavior(Items.PLAYER_HEAD, dispensebehaviormaybe);
+        DispenserBlock.registerBehavior(Items.WITHER_SKELETON_SKULL, new OptionalDispenseItemBehavior() {
             @Override
-            protected ItemStack lambda$static$0(BlockSource isourceblock, ItemStack itemstack) {
+            protected ItemStack execute(BlockSource isourceblock, ItemStack itemstack) {
                 Level world = isourceblock.getLevel();
-                Direction enumdirection = (Direction) isourceblock.getBlockState().getValue(DispenserBlock.FACING);
+                Direction enumdirection = isourceblock.getBlockState().getValue(DispenserBlock.FACING);
                 BlockPos blockposition = isourceblock.getPos().relative(enumdirection);
 
                 // CraftBukkit start
@@ -729,7 +729,7 @@ public interface DispenseItemBehavior {
                 if (!event.getItem().equals(craftItem)) {
                     // Chain to handler for new item
                     ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-                    DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+                    DispenseItemBehavior idispensebehavior = DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
                     if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != this) {
                         idispensebehavior.dispense(isourceblock, eventStack);
                         return itemstack;
@@ -738,7 +738,7 @@ public interface DispenseItemBehavior {
                 // CraftBukkit end
 
                 if (world.isEmptyBlock(blockposition) && WitherSkullBlock.canSpawnMob(world, blockposition, itemstack)) {
-                    world.setBlock(blockposition, (BlockState) Blocks.WITHER_SKELETON_SKULL.defaultBlockState().setValue(SkullBlock.ROTATION, enumdirection.getAxis() == Direction.Axis.Y ? 0 : enumdirection.getOpposite().get2DDataValue() * 4), 3);
+                    world.setBlock(blockposition, Blocks.WITHER_SKELETON_SKULL.defaultBlockState().setValue(SkullBlock.ROTATION, enumdirection.getAxis() == Direction.Axis.Y ? 0 : enumdirection.getOpposite().get2DDataValue() * 4), 3);
                     BlockEntity tileentity = world.getBlockEntity(blockposition);
 
                     if (tileentity instanceof SkullBlockEntity) {
@@ -753,12 +753,12 @@ public interface DispenseItemBehavior {
 
                 return itemstack;
             }
-        }));
-        DispenserBlock.registerBehavior((ItemLike) Blocks.CARVED_PUMPKIN, (DispenseItemBehavior) (new OptionalDispenseItemBehavior() {
+        });
+        DispenserBlock.registerBehavior(Blocks.CARVED_PUMPKIN, new OptionalDispenseItemBehavior() {
             @Override
-            protected ItemStack lambda$static$0(BlockSource isourceblock, ItemStack itemstack) {
+            protected ItemStack execute(BlockSource isourceblock, ItemStack itemstack) {
                 Level world = isourceblock.getLevel();
-                BlockPos blockposition = isourceblock.getPos().relative((Direction) isourceblock.getBlockState().getValue(DispenserBlock.FACING));
+                BlockPos blockposition = isourceblock.getPos().relative(isourceblock.getBlockState().getValue(DispenserBlock.FACING));
                 CarvedPumpkinBlock blockpumpkincarved = (CarvedPumpkinBlock) Blocks.CARVED_PUMPKIN;
 
                 // CraftBukkit start
@@ -777,7 +777,7 @@ public interface DispenseItemBehavior {
                 if (!event.getItem().equals(craftItem)) {
                     // Chain to handler for new item
                     ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-                    DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+                    DispenseItemBehavior idispensebehavior = DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
                     if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != this) {
                         idispensebehavior.dispense(isourceblock, eventStack);
                         return itemstack;
@@ -785,7 +785,7 @@ public interface DispenseItemBehavior {
                 }
                 // CraftBukkit end
 
-                if (world.isEmptyBlock(blockposition) && blockpumpkincarved.canSpawnGolem((LevelReader) world, blockposition)) {
+                if (world.isEmptyBlock(blockposition) && blockpumpkincarved.canSpawnGolem(world, blockposition)) {
                     if (!world.isClientSide) {
                         world.setBlock(blockposition, blockpumpkincarved.defaultBlockState(), 3);
                     }
@@ -798,18 +798,18 @@ public interface DispenseItemBehavior {
 
                 return itemstack;
             }
-        }));
-        DispenserBlock.registerBehavior((ItemLike) Blocks.SHULKER_BOX.asItem(), (DispenseItemBehavior) (new ShulkerBoxDispenseBehavior()));
+        });
+        DispenserBlock.registerBehavior(Blocks.SHULKER_BOX.asItem(), new ShulkerBoxDispenseBehavior());
         DyeColor[] aenumcolor = DyeColor.values();
         int i = aenumcolor.length;
 
         for (int j = 0; j < i; ++j) {
             DyeColor enumcolor = aenumcolor[j];
 
-            DispenserBlock.registerBehavior((ItemLike) ShulkerBoxBlock.getBlockByColor(enumcolor).asItem(), (DispenseItemBehavior) (new ShulkerBoxDispenseBehavior()));
+            DispenserBlock.registerBehavior(ShulkerBoxBlock.getBlockByColor(enumcolor).asItem(), new ShulkerBoxDispenseBehavior());
         }
 
-        DispenserBlock.registerBehavior((ItemLike) Items.GLASS_BOTTLE.asItem(), (DispenseItemBehavior) (new OptionalDispenseItemBehavior() {
+        DispenserBlock.registerBehavior(Items.GLASS_BOTTLE.asItem(), new OptionalDispenseItemBehavior() {
             private final DefaultDispenseItemBehavior c = new DefaultDispenseItemBehavior();
 
             private ItemStack a(BlockSource isourceblock, ItemStack itemstack, ItemStack itemstack1) {
@@ -826,10 +826,10 @@ public interface DispenseItemBehavior {
             }
 
             @Override
-            public ItemStack lambda$static$0(BlockSource isourceblock, ItemStack itemstack) {
+            public ItemStack execute(BlockSource isourceblock, ItemStack itemstack) {
                 this.success = false;
                 Level world = isourceblock.getLevel();
-                BlockPos blockposition = isourceblock.getPos().relative((Direction) isourceblock.getBlockState().getValue(DispenserBlock.FACING));
+                BlockPos blockposition = isourceblock.getPos().relative(isourceblock.getBlockState().getValue(DispenserBlock.FACING));
                 BlockState iblockdata = world.getBlockState(blockposition);
                 Block block = iblockdata.getBlock();
 
@@ -849,7 +849,7 @@ public interface DispenseItemBehavior {
                 if (!event.getItem().equals(craftItem)) {
                     // Chain to handler for new item
                     ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-                    DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+                    DispenseItemBehavior idispensebehavior = DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
                     if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != this) {
                         idispensebehavior.dispense(isourceblock, eventStack);
                         return itemstack;
@@ -857,8 +857,8 @@ public interface DispenseItemBehavior {
                 }
                 // CraftBukkit end
 
-                if (block.is(BlockTags.BEEHIVES) && (Integer) iblockdata.getValue(BeehiveBlock.HONEY_LEVEL) >= 5) {
-                    ((BeehiveBlock) iblockdata.getBlock()).releaseBeesAndResetHoneyLevel(world.getLevel(), iblockdata, blockposition, (Player) null, BeehiveBlockEntity.BeeReleaseStatus.BEE_RELEASED);
+                if (block.is(BlockTags.BEEHIVES) && iblockdata.getValue(BeehiveBlock.HONEY_LEVEL) >= 5) {
+                    ((BeehiveBlock) iblockdata.getBlock()).releaseBeesAndResetHoneyLevel(world.getLevel(), iblockdata, blockposition, null, BeehiveBlockEntity.BeeReleaseStatus.BEE_RELEASED);
                     this.success = true;
                     return this.a(isourceblock, itemstack, new ItemStack(Items.HONEY_BOTTLE));
                 } else if (world.getFluidState(blockposition).is(FluidTags.WATER)) {
@@ -868,8 +868,8 @@ public interface DispenseItemBehavior {
                     return super.execute(isourceblock, itemstack);
                 }
             }
-        }));
-        DispenserBlock.registerBehavior((ItemLike) Items.SHEARS.asItem(), (DispenseItemBehavior) (new OptionalDispenseItemBehavior() {
+        });
+        DispenserBlock.registerBehavior(Items.SHEARS.asItem(), new OptionalDispenseItemBehavior() {
             @Override
             protected ItemStack execute(BlockSource isourceblock, ItemStack itemstack) {
                 Level world = isourceblock.getLevel();
@@ -889,7 +889,7 @@ public interface DispenseItemBehavior {
                 if (!event.getItem().equals(craftItem)) {
                     // Chain to handler for new item
                     ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-                    DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+                    DispenseItemBehavior idispensebehavior = DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
                     if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != this) {
                         idispensebehavior.dispense(isourceblock, eventStack);
                         return itemstack;
@@ -899,7 +899,7 @@ public interface DispenseItemBehavior {
 
                 if (!world.isClientSide()) {
                     this.success = false;
-                    BlockPos blockposition = isourceblock.getPos().relative((Direction) isourceblock.getBlockState().getValue(DispenserBlock.FACING));
+                    BlockPos blockposition = isourceblock.getPos().relative(isourceblock.getBlockState().getValue(DispenserBlock.FACING));
                     List<Sheep> list = world.getEntitiesOfClass(Sheep.class, new AABB(blockposition));
                     Iterator iterator1 = list.iterator();
 
@@ -913,7 +913,7 @@ public interface DispenseItemBehavior {
                             }
                             // CraftBukkit end
                             entitysheep.shear();
-                            if (itemstack.hurt(1, world.random, (ServerPlayer) null)) {
+                            if (itemstack.hurt(1, world.random, null)) {
                                 itemstack.setCount(0);
                             }
 
@@ -926,15 +926,15 @@ public interface DispenseItemBehavior {
                         BlockState iblockdata = world.getBlockState(blockposition);
 
                         if (iblockdata.is(BlockTags.BEEHIVES)) {
-                            int k = (Integer) iblockdata.getValue(BeehiveBlock.HONEY_LEVEL);
+                            int k = iblockdata.getValue(BeehiveBlock.HONEY_LEVEL);
 
                             if (k >= 5) {
-                                if (itemstack.hurt(1, world.random, (ServerPlayer) null)) {
+                                if (itemstack.hurt(1, world.random, null)) {
                                     itemstack.setCount(0);
                                 }
 
                                 BeehiveBlock.dropHoneycomb(world, blockposition);
-                                ((BeehiveBlock) iblockdata.getBlock()).releaseBeesAndResetHoneyLevel(world, iblockdata, blockposition, (Player) null, BeehiveBlockEntity.BeeReleaseStatus.BEE_RELEASED);
+                                ((BeehiveBlock) iblockdata.getBlock()).releaseBeesAndResetHoneyLevel(world, iblockdata, blockposition, null, BeehiveBlockEntity.BeeReleaseStatus.BEE_RELEASED);
                                 this.success = true;
                             }
                         }
@@ -943,6 +943,6 @@ public interface DispenseItemBehavior {
 
                 return itemstack;
             }
-        }));
+        });
     }
 }
diff --git a/src/main/java/net/minecraft/server/EULA.java b/src/main/java/net/minecraft/server/EULA.java
index e9452d5515c3d564a0104eb09e5c0a6b1bb1beb0..65ee95a3f9bf86f1922489636d9639b4c45f8bbc 100644
--- a/src/main/java/net/minecraft/server/EULA.java
+++ b/src/main/java/net/minecraft/server/EULA.java
@@ -8,13 +8,13 @@ import net.minecraft.SharedConstants;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public class Eula {
+public class EULA {
 
     private static final Logger LOGGER = LogManager.getLogger();
     private final java.nio.file.Path file;
     private final boolean agreed;
 
-    public Eula(java.nio.file.Path java_nio_file_path) {
+    public EULA(java.nio.file.Path java_nio_file_path) {
         this.file = java_nio_file_path;
         this.agreed = SharedConstants.IS_RUNNING_IN_IDE || this.readFile();
     }
@@ -51,7 +51,7 @@ public class Eula {
 
             return flag;
         } catch (Exception exception) {
-            Eula.LOGGER.warn("Failed to load {}", this.file);
+            EULA.LOGGER.warn("Failed to load {}", this.file);
             this.saveDefaults();
             return false;
         }
@@ -90,7 +90,7 @@ public class Eula {
 
                 }
             } catch (Exception exception) {
-                Eula.LOGGER.warn("Failed to save {}", this.file, exception);
+                EULA.LOGGER.warn("Failed to save {}", this.file, exception);
             }
 
         }
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 915c3b2e61b6600de98451d51c2b0adbd20cb894..243d44f7e71f662bec43f7dc009f6259346f25c9 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -1737,7 +1737,7 @@ public class ServerLevel extends net.minecraft.world.level.Level {
         this.getChunkSourceOH().broadcastIncludingSelf(entity, new ClientboundEntityEventPacket(entity, b0));
     }
 
-    @Override
+    // @Override
     public ServerChunkCache getChunkSourceOH() {
         return (ServerChunkCache) super.getChunkSource();
     }
diff --git a/src/main/java/net/minecraft/server/players/GameProfileCache.java b/src/main/java/net/minecraft/server/players/GameProfileCache.java
index 3b661ac25b12ce75b81d2104c2ec13991dcb4954..0d8ebc1b152eb3aafd9653d3079b71e53788593e 100644
--- a/src/main/java/net/minecraft/server/players/GameProfileCache.java
+++ b/src/main/java/net/minecraft/server/players/GameProfileCache.java
@@ -344,7 +344,7 @@ public class GameProfileCache {
                             return null;
                         }
 
-                        return GameProfileCache.this.new net.minecraft.server.players.GameProfileCache.UserCacheEntry(new GameProfile(uuid, s1), date);
+                        return GameProfileCache.this.new UserCacheEntry(new GameProfile(uuid, s1), date);
                     } else {
                         return null;
                     }
diff --git a/src/main/java/net/minecraft/util/datafix/DataFixers.java b/src/main/java/net/minecraft/util/datafix/DataFixers.java
index 3eb8b43a59c4fc0f1f4a7d8bf5daa2455bb7e430..4fff8d734244489c50a94e0ce331a7a70f17c345 100644
--- a/src/main/java/net/minecraft/util/datafix/DataFixers.java
+++ b/src/main/java/net/minecraft/util/datafix/DataFixers.java
@@ -68,7 +68,6 @@ public class DataFixers {
         return datafixerbuilder.build(Util.backgroundExecutor());
     }
 
-    public static DataFixer getDataFixer() { return getDataFixer(); } // Paper - OBFHELPER
     public static DataFixer getDataFixer() {
         return DataFixers.DATA_FIXER;
     }
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index ac0be2d7f6544bcf05a3305ae9802ddd19a72389..79897fc6802732b862c363027b7199be2056d7ad 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -171,7 +171,7 @@ public abstract class Entity implements Nameable, CommandSource, KeyedObject { /
     private CraftEntity bukkitEntity;
 
     public ChunkMap.TrackedEntity tracker; // Paper
-    boolean collisionLoadChunks = false; // Paper
+    public boolean collisionLoadChunks = false; // Paper
     public Throwable addedToWorldStack; // Paper - entity debug
     public CraftEntity getBukkitEntity() {
         if (bukkitEntity == null) {
diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index 002ce01ffd204a8fb65cf4c641609ee3809ad95b..f925961ce4e96a301191019c86bf6cc9ceb3edc3 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -118,7 +118,6 @@ import org.bukkit.Location;
 import org.bukkit.craftbukkit.attribute.CraftAttributeMap;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
-import org.bukkit.entity.LivingEntity;
 import org.bukkit.entity.Player;
 import org.bukkit.event.entity.EntityDamageEvent;
 import org.bukkit.event.entity.EntityDamageEvent.DamageModifier;
@@ -1297,7 +1296,7 @@ public abstract class LivingEntity extends Entity {
                 }
             }
 
-            EntityResurrectEvent event = new EntityResurrectEvent((LivingEntity) this.getBukkitEntity());
+            EntityResurrectEvent event = new EntityResurrectEvent((org.bukkit.entity.LivingEntity) this.getBukkitEntity());
             event.setCancelled(itemstack == null);
             this.level.getServerOH().getPluginManager().callEvent(event);
 
@@ -1548,7 +1547,7 @@ public abstract class LivingEntity extends Entity {
             org.bukkit.util.Vector delta = new org.bukkit.util.Vector(currentMot.x - vec3d.x, currentMot.y - vec3d.y, currentMot.z - vec3d.z);
             // Restore old velocity to be able to access it in the event
             this.setDeltaMovement(vec3d);
-            if (entity == null || new com.destroystokyo.paper.event.entity.EntityKnockbackByEntityEvent((LivingEntity) getBukkitEntity(), entity.getBukkitEntity(), f, delta).callEvent()) {
+            if (entity == null || new com.destroystokyo.paper.event.entity.EntityKnockbackByEntityEvent((org.bukkit.entity.LivingEntity) getBukkitEntity(), entity.getBukkitEntity(), f, delta).callEvent()) {
                 this.setDeltaMovement(vec3d.x + delta.getX(), vec3d.y + delta.getY(), vec3d.z + delta.getZ());
             }
             // Paper end
diff --git a/src/main/java/net/minecraft/world/entity/decoration/ArmorStand.java b/src/main/java/net/minecraft/world/entity/decoration/ArmorStand.java
index 84a3037d431b9258b9cb3d96fdfea77ea39f7422..e691f3a9a7c6624d130ca1290bd48bdc1a7bc56d 100644
--- a/src/main/java/net/minecraft/world/entity/decoration/ArmorStand.java
+++ b/src/main/java/net/minecraft/world/entity/decoration/ArmorStand.java
@@ -41,7 +41,6 @@ import net.minecraft.world.phys.Vec3;
 import org.bukkit.inventory.EquipmentSlot;
 import org.bukkit.craftbukkit.CraftEquipmentSlot;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
-import org.bukkit.entity.ArmorStand;
 import org.bukkit.entity.Player;
 import org.bukkit.event.player.PlayerArmorStandManipulateEvent;
 // CraftBukkit end
@@ -451,7 +450,7 @@ public class ArmorStand extends LivingEntity {
             org.bukkit.inventory.ItemStack playerHeldItem = CraftItemStack.asCraftMirror(itemstack);
 
             Player player = (Player) entityhuman.getBukkitEntity();
-            ArmorStand self = (ArmorStand) this.getBukkitEntity();
+            org.bukkit.entity.ArmorStand self = (org.bukkit.entity.ArmorStand) this.getBukkitEntity();
 
             EquipmentSlot slot = CraftEquipmentSlot.getSlot(enumitemslot);
             PlayerArmorStandManipulateEvent armorStandManipulateEvent = new PlayerArmorStandManipulateEvent(player,self,playerHeldItem,armorStandItem,slot);
diff --git a/src/main/java/net/minecraft/world/entity/monster/RangedAttackMob.java b/src/main/java/net/minecraft/world/entity/monster/RangedAttackMob.java
index ea0dd808697d135f88ea7a8ef929489ff4882c0f..a48f896038369d02fd6b78a7d55bb68878d74f36 100644
--- a/src/main/java/net/minecraft/world/entity/monster/RangedAttackMob.java
+++ b/src/main/java/net/minecraft/world/entity/monster/RangedAttackMob.java
@@ -7,5 +7,5 @@ public interface RangedAttackMob {
     void performRangedAttack(LivingEntity entityliving, float f); default void rangedAttack(LivingEntity entityliving, float f) { performRangedAttack(entityliving, f); } // Paper - OBFHELPER
 
     // - see EntitySkeletonAbstract melee goal
-    void q(boolean flag); default void setChargingAttack(boolean charging) { q(charging); }; // Paper
+    void setAggressive(boolean flag); default void setChargingAttack(boolean charging) { setAggressive(charging); }; // Paper
 }
diff --git a/src/main/java/net/minecraft/world/entity/monster/Slime.java b/src/main/java/net/minecraft/world/entity/monster/Slime.java
index 8d24fb86fdf7690cadbe57f2a872bc2db0d637dd..7f3ca4c92a3a103f7fec9a35e46587d9204fe8ad 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Slime.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Slime.java
@@ -45,7 +45,6 @@ import com.destroystokyo.paper.event.entity.SlimeSwimEvent;
 import com.destroystokyo.paper.event.entity.SlimeTargetLivingEntityEvent;
 import com.destroystokyo.paper.event.entity.SlimeWanderEvent;
 import org.bukkit.entity.LivingEntity;
-import org.bukkit.entity.Slime;
 // Paper end
 // CraftBukkit start
 import java.util.ArrayList;
@@ -407,7 +406,7 @@ public class Slime extends Mob implements Enemy {
 
         @Override
         public boolean canUse() {
-            return !this.a.isPassenger() && this.a.canWander && new SlimeWanderEvent((Slime) this.a.getBukkitEntity()).callEvent(); // Paper
+            return !this.a.isPassenger() && this.a.canWander && new SlimeWanderEvent((org.bukkit.entity.Slime) this.a.getBukkitEntity()).callEvent(); // Paper
         }
 
         @Override
@@ -428,7 +427,7 @@ public class Slime extends Mob implements Enemy {
 
         @Override
         public boolean canUse() {
-            return (this.a.isInWater() || this.a.isInLava()) && this.a.getMoveControl() instanceof net.minecraft.world.entity.monster.Slime.ControllerMoveSlime && this.a.canWander && new SlimeSwimEvent((Slime) this.a.getBukkitEntity()).callEvent(); // Paper
+            return (this.a.isInWater() || this.a.isInLava()) && this.a.getMoveControl() instanceof net.minecraft.world.entity.monster.Slime.ControllerMoveSlime && this.a.canWander && new SlimeSwimEvent((org.bukkit.entity.Slime) this.a.getBukkitEntity()).callEvent(); // Paper
         }
 
         @Override
@@ -462,7 +461,7 @@ public class Slime extends Mob implements Enemy {
             if (--this.c <= 0) {
                 this.c = 40 + this.a.getRandom().nextInt(60);
                 // Paper start
-                SlimeChangeDirectionEvent event = new SlimeChangeDirectionEvent((Slime) this.a.getBukkitEntity(), (float) this.a.getRandom().nextInt(360));
+                SlimeChangeDirectionEvent event = new SlimeChangeDirectionEvent((org.bukkit.entity.Slime) this.a.getBukkitEntity(), (float) this.a.getRandom().nextInt(360));
                 if (!this.a.canWander || !event.callEvent()) return;
                 this.b = event.getNewYaw();
                 // Paper end
@@ -493,7 +492,7 @@ public class Slime extends Mob implements Enemy {
             if (entityliving instanceof Player && ((Player) entityliving).abilities.invulnerable) {
                 return false;
             }
-            return this.a.getMoveControl() instanceof net.minecraft.world.entity.monster.Slime.ControllerMoveSlime && this.a.canWander && new SlimeTargetLivingEntityEvent((Slime) this.a.getBukkitEntity(), (LivingEntity) entityliving.getBukkitEntity()).callEvent();
+            return this.a.getMoveControl() instanceof net.minecraft.world.entity.monster.Slime.ControllerMoveSlime && this.a.canWander && new SlimeTargetLivingEntityEvent((org.bukkit.entity.Slime) this.a.getBukkitEntity(), (LivingEntity) entityliving.getBukkitEntity()).callEvent();
             // Paper end
         }
 
@@ -514,7 +513,7 @@ public class Slime extends Mob implements Enemy {
             if (entityliving instanceof Player && ((Player) entityliving).abilities.invulnerable) {
                 return false;
             }
-            return --this.b > 0 && this.a.canWander && new SlimeTargetLivingEntityEvent((Slime) this.a.getBukkitEntity(), (LivingEntity) entityliving.getBukkitEntity()).callEvent();
+            return --this.b > 0 && this.a.canWander && new SlimeTargetLivingEntityEvent((org.bukkit.entity.Slime) this.a.getBukkitEntity(), (LivingEntity) entityliving.getBukkitEntity()).callEvent();
             // Paper end
         }
 
diff --git a/src/main/java/net/minecraft/world/entity/monster/Witch.java b/src/main/java/net/minecraft/world/entity/monster/Witch.java
index 44cbf0acf4155a39ad593a95e6da6b2ec084b775..85d37640e4ddeba2b39c91dc88fc7bbef7e5b93e 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Witch.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Witch.java
@@ -3,7 +3,6 @@ package net.minecraft.world.entity.monster;
 // Paper start
 import com.destroystokyo.paper.event.entity.WitchReadyPotionEvent;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
-import org.bukkit.entity.Witch;
 // Paper end
 
 import java.util.Iterator;
@@ -192,7 +191,7 @@ public class Witch extends Raider implements RangedAttackMob {
 
     // Paper start
     public void setDrinkingPotion(ItemStack potion) {
-        setItemSlot(EquipmentSlot.MAINHAND, CraftItemStack.asNMSCopy(WitchReadyPotionEvent.process((Witch) getBukkitEntity(), CraftItemStack.asCraftMirror(potion))));
+        setItemSlot(EquipmentSlot.MAINHAND, CraftItemStack.asNMSCopy(WitchReadyPotionEvent.process((org.bukkit.entity.Witch) getBukkitEntity(), CraftItemStack.asCraftMirror(potion))));
         setPotionUseTimeLeft(getMainHandItem().getItemUseMaxDuration());
         setDrinkingPotion(true);
         level.sendSoundEffect(null, getX(), getY(), getZ(), SoundEvents.WITCH_DRINK, getSoundSource(), 1.0F, 0.8F + random.nextFloat() * 0.4F);
diff --git a/src/main/java/net/minecraft/world/entity/monster/Zombie.java b/src/main/java/net/minecraft/world/entity/monster/Zombie.java
index fb54868aba4199d34145577530ae264f7f607171..9c3087c711dae2b5f95120634a6cbc6cb22ed9dc 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Zombie.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Zombie.java
@@ -68,7 +68,6 @@ import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.state.BlockState;
 // CraftBukkit start
 import org.bukkit.craftbukkit.event.CraftEventFactory;
-import org.bukkit.entity.Zombie;
 import org.bukkit.event.entity.CreatureSpawnEvent;
 import org.bukkit.event.entity.EntityCombustByEntityEvent;
 import org.bukkit.event.entity.EntityTargetEvent;
@@ -321,7 +320,7 @@ public class Zombie extends Monster {
             entityzombie.setInvulnerable(this.isInvulnerable());
             // CraftBukkit start
             if (CraftEventFactory.callEntityTransformEvent(this, entityzombie, EntityTransformEvent.TransformReason.DROWNED).isCancelled()) {
-                ((Zombie) getBukkitEntity()).setConversionTime(-1); // SPIGOT-5208: End conversion to stop event spam
+                ((org.bukkit.entity.Zombie) getBukkitEntity()).setConversionTime(-1); // SPIGOT-5208: End conversion to stop event spam
                 return;
             }
             // CraftBukkit end
diff --git a/src/main/java/net/minecraft/world/entity/monster/ZombieVillager.java b/src/main/java/net/minecraft/world/entity/monster/ZombieVillager.java
index 2035a42742758baad0e857e448008d47b5989fa1..33de1ed2651c4fffc5b180c9d7bdc09b8fc7730b 100644
--- a/src/main/java/net/minecraft/world/entity/monster/ZombieVillager.java
+++ b/src/main/java/net/minecraft/world/entity/monster/ZombieVillager.java
@@ -46,7 +46,6 @@ import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
 // CraftBukkit start
 import org.bukkit.craftbukkit.event.CraftEventFactory;
-import org.bukkit.entity.ZombieVillager;
 import org.bukkit.event.entity.EntityTransformEvent;
 // CraftBukkit end
 
@@ -235,7 +234,7 @@ public class ZombieVillager extends Zombie implements VillagerDataHolder {
         entityvillager.setInvulnerable(this.isInvulnerable());
         // CraftBukkit start
         if (CraftEventFactory.callEntityTransformEvent(this, entityvillager, EntityTransformEvent.TransformReason.CURED).isCancelled()) {
-            ((ZombieVillager) getBukkitEntity()).setConversionTime(-1); // SPIGOT-5208: End conversion to stop event spam
+            ((org.bukkit.entity.ZombieVillager) getBukkitEntity()).setConversionTime(-1); // SPIGOT-5208: End conversion to stop event spam
             return;
         }
         if (!new com.destroystokyo.paper.event.entity.EntityTransformedEvent(this.getBukkitEntity(), entityvillager.getBukkitEntity(), com.destroystokyo.paper.event.entity.EntityTransformedEvent.TransformedReason.CURED).callEvent()) return; // Paper
diff --git a/src/main/java/net/minecraft/world/entity/npc/AbstractVillager.java b/src/main/java/net/minecraft/world/entity/npc/AbstractVillager.java
index f152037611fea0bd0d112a2e49b60ef8827f4988..31d6bcc190efffa6b8291fae1c6fe6ab50359e07 100644
--- a/src/main/java/net/minecraft/world/entity/npc/AbstractVillager.java
+++ b/src/main/java/net/minecraft/world/entity/npc/AbstractVillager.java
@@ -35,7 +35,6 @@ import net.minecraft.world.level.dimension.DimensionType;
 import org.bukkit.Bukkit;
 import org.bukkit.craftbukkit.inventory.CraftMerchant;
 import org.bukkit.craftbukkit.inventory.CraftMerchantRecipe;
-import org.bukkit.entity.AbstractVillager;
 import org.bukkit.event.entity.VillagerAcquireTradeEvent;
 // CraftBukkit end
 
@@ -252,6 +251,11 @@ public abstract class AbstractVillager extends AgableMob implements Npc, Merchan
 
     protected abstract void updateTrades();
 
+    @Override
+    public Level getLevel() {
+        return level;
+    }
+
     protected void a(MerchantOffers merchantrecipelist, VillagerTrades.ItemListing[] avillagertrades_imerchantrecipeoption, int i) {
         Set<Integer> set = Sets.newHashSet();
 
@@ -274,7 +278,7 @@ public abstract class AbstractVillager extends AgableMob implements Npc, Merchan
 
             if (merchantrecipe != null) {
                 // CraftBukkit start
-                VillagerAcquireTradeEvent event = new VillagerAcquireTradeEvent((AbstractVillager) getBukkitEntity(), merchantrecipe.asBukkit());
+                VillagerAcquireTradeEvent event = new VillagerAcquireTradeEvent((org.bukkit.entity.AbstractVillager) getBukkitEntity(), merchantrecipe.asBukkit());
                 // Suppress during worldgen
                 if (this.valid) {
                     Bukkit.getPluginManager().callEvent(event);
@@ -286,5 +290,7 @@ public abstract class AbstractVillager extends AgableMob implements Npc, Merchan
             }
         }
 
+
+
     }
 }
diff --git a/src/main/java/net/minecraft/world/entity/npc/Villager.java b/src/main/java/net/minecraft/world/entity/npc/Villager.java
index a1952dfeb1dd0572da5dbf2517ad8d7ba9183c50..ed720bd6c7710aa1139b3355fbd3d35116c5f579 100644
--- a/src/main/java/net/minecraft/world/entity/npc/Villager.java
+++ b/src/main/java/net/minecraft/world/entity/npc/Villager.java
@@ -85,7 +85,6 @@ import org.bukkit.Bukkit;
 import org.bukkit.craftbukkit.entity.CraftVillager;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.craftbukkit.inventory.CraftMerchantRecipe;
-import org.bukkit.entity.Villager;
 import org.bukkit.event.entity.EntityTransformEvent;
 import org.bukkit.event.entity.VillagerAcquireTradeEvent;
 import org.bukkit.event.entity.VillagerReplenishTradeEvent;
@@ -440,7 +439,7 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
 
                 // CraftBukkit start
                 int bonus = -Mth.floor((float) i * merchantrecipe.getPriceMultiplier());
-                VillagerReplenishTradeEvent event = new VillagerReplenishTradeEvent((Villager) this.getBukkitEntity(), merchantrecipe.asBukkit(), bonus);
+                VillagerReplenishTradeEvent event = new VillagerReplenishTradeEvent((org.bukkit.entity.Villager) this.getBukkitEntity(), merchantrecipe.asBukkit(), bonus);
                 Bukkit.getPluginManager().callEvent(event);
                 if (!event.isCancelled()) {
                     merchantrecipe.addToSpecialPriceDiff(event.getBonus());
diff --git a/src/main/java/net/minecraft/world/entity/player/Player.java b/src/main/java/net/minecraft/world/entity/player/Player.java
index 4b1035069fe493bfe63a8727afa2052374d0166c..abaa614ebbe3a1ae115fb65861eb40342478b70d 100644
--- a/src/main/java/net/minecraft/world/entity/player/Player.java
+++ b/src/main/java/net/minecraft/world/entity/player/Player.java
@@ -113,7 +113,6 @@ import net.minecraft.world.scores.Scoreboard;
 import org.bukkit.craftbukkit.entity.CraftHumanEntity;
 import org.bukkit.craftbukkit.util.CraftVector;
 import org.bukkit.entity.Item;
-import org.bukkit.entity.Player;
 import org.bukkit.event.entity.CreatureSpawnEvent;
 import org.bukkit.event.entity.EntityCombustByEntityEvent;
 import org.bukkit.event.player.PlayerBedLeaveEvent;
@@ -694,7 +693,7 @@ public abstract class Player extends LivingEntity {
             }
 
             // CraftBukkit start - fire PlayerDropItemEvent
-            Player player = (Player) this.getBukkitEntity();
+            org.bukkit.entity.Player player = (org.bukkit.entity.Player) this.getBukkitEntity();
             Item drop = (Item) entityitem.getBukkitEntity();
 
             PlayerDropItemEvent event = new PlayerDropItemEvent(player, drop);
@@ -1246,7 +1245,7 @@ public abstract class Player extends LivingEntity {
                         if (entity instanceof ServerPlayer && entity.hurtMarked) {
                             // CraftBukkit start - Add Velocity Event
                             boolean cancelled = false;
-                            Player player = (Player) entity.getBukkitEntity();
+                            org.bukkit.entity.Player player = (org.bukkit.entity.Player) entity.getBukkitEntity();
                             org.bukkit.util.Vector velocity = CraftVector.toBukkit(vec3d);
 
                             PlayerVelocityEvent event = new PlayerVelocityEvent(player, velocity.clone());
@@ -1453,7 +1452,7 @@ public abstract class Player extends LivingEntity {
             bedResult = Either.right(Unit.INSTANCE);
         }
 
-        if (this.getBukkitEntity() instanceof Player) {
+        if (this.getBukkitEntity() instanceof org.bukkit.entity.Player) {
             bedResult = org.bukkit.craftbukkit.event.CraftEventFactory.callPlayerBedEnterEvent(this, blockposition, bedResult);
 
             if (bedResult.left().isPresent()) {
@@ -1502,8 +1501,8 @@ public abstract class Player extends LivingEntity {
         }
 
         // CraftBukkit start - fire PlayerBedLeaveEvent
-        if (this.getBukkitEntity() instanceof Player) {
-            Player player = (Player) this.getBukkitEntity();
+        if (this.getBukkitEntity() instanceof org.bukkit.entity.Player) {
+            org.bukkit.entity.Player player = (org.bukkit.entity.Player) this.getBukkitEntity();
 
             org.bukkit.block.Block bed;
             if (bedPosition != null) {
diff --git a/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java b/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java
index 372fc1dbfc15ae44010717bcd93555489a63f7d5..5902c297ef2d275c42bc997711077b7291902d20 100644
--- a/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java
+++ b/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java
@@ -106,7 +106,6 @@ public class LevelChunkSection {
         return this.nonEmptyBlockCount == 0;
     }
 
-    public static boolean isEmpty(@Nullable LevelChunkSection chunksection) { return isEmpty(chunksection) ; } // Paper - OBFHELPER
     public static boolean isEmpty(@Nullable LevelChunkSection chunksection) {
         return chunksection == LevelChunk.EMPTY_SECTION || chunksection.isEmpty();
     }
diff --git a/src/main/java/net/minecraft/world/level/chunk/storage/RegionFile.java b/src/main/java/net/minecraft/world/level/chunk/storage/RegionFile.java
index 2908ecece1ef9c3b2f211e4438add19064600b9c..817383470603a5cde75f6fa882e65c43c559e73d 100644
--- a/src/main/java/net/minecraft/world/level/chunk/storage/RegionFile.java
+++ b/src/main/java/net/minecraft/world/level/chunk/storage/RegionFile.java
@@ -442,12 +442,6 @@ public class RegionFile implements AutoCloseable {
                 }
             }
         } catch (java.lang.NoSuchMethodException e) {}
-        if (cleaner == null && getVersion() <= 8) {
-            cleaner = (buf) -> {
-                ((sun.nio.ch.DirectBuffer) buf).cleaner().clean();
-            };
-            LOGGER.info("[RegionFile] Using Java 8 DirectByteBuffer cleanup method");
-        }
     }
     public static void cleanDirectByteBuffer(ByteBuffer toBeDestroyed) {
         try {
diff --git a/src/main/java/net/minecraft/world/level/saveddata/maps/MapItemSavedData.java b/src/main/java/net/minecraft/world/level/saveddata/maps/MapItemSavedData.java
index cd0d98190216de94def9431979fc1e6a735a3ba1..26ed6973a9e4e783df2c94b92682f927b10fcb41 100644
--- a/src/main/java/net/minecraft/world/level/saveddata/maps/MapItemSavedData.java
+++ b/src/main/java/net/minecraft/world/level/saveddata/maps/MapItemSavedData.java
@@ -446,7 +446,7 @@ public class MapItemSavedData extends SavedData {
 
         // Paper start
         private void addSeenPlayers(java.util.Collection<MapDecoration> icons) {
-            org.bukkit.entity.Player player = (org.bukkit.entity.Player) player.getBukkitEntity();
+            org.bukkit.entity.Player player = (org.bukkit.entity.Player) this.player.getBukkitEntity();
             MapItemSavedData.this.decorations.forEach((name, mapIcon) -> {
                 // If this cursor is for a player check visibility with vanish system
                 org.bukkit.entity.Player other = org.bukkit.Bukkit.getPlayerExact(name); // Spigot
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/entries/LootPoolSingletonContainer.java b/src/main/java/net/minecraft/world/level/storage/loot/entries/LootPoolSingletonContainer.java
index 51aaaa44e0e4445812e7545648ea5839aa524406..968db1ab1fd6cf662d78a2adeb7b2724d67528a2 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/entries/LootPoolSingletonContainer.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/entries/LootPoolSingletonContainer.java
@@ -166,7 +166,7 @@ public abstract class LootPoolSingletonContainer extends LootPoolEntryContainer
             }
             // This is vanilla
             float qualityModifer = (float) getQuality() * f;
-            double baseWeight = (getWeight() + qualityModifer);
+            double baseWeight = (LootPoolSingletonContainer.this.getWeight() + qualityModifer);
             if (com.destroystokyo.paper.PaperConfig.useAlternativeLuckFormula) {
                 // Random boost to avoid losing precision in the final int cast on return
                 final int weightBoost = 100;
diff --git a/src/main/resources/configurations/bukkit.yml b/src/main/resources/configurations/bukkit.yml
new file mode 100644
index 0000000000000000000000000000000000000000..e9cee1713ef7b7be3347e5bf3ecf4261e843ad3c
--- /dev/null
+++ b/src/main/resources/configurations/bukkit.yml
@@ -0,0 +1,39 @@
+# This is the main configuration file for Bukkit.
+# As you can see, there's actually not that much to configure without any plugins.
+# For a reference for any variable inside this file, check out the Bukkit Wiki at
+# https://www.spigotmc.org/go/bukkit-yml
+# 
+# If you need help on this file, feel free to join us on irc or leave a message
+# on the forums asking for advice.
+# 
+# IRC: #spigot @ irc.spi.gt
+#    (If this means nothing to you, just go to https://www.spigotmc.org/go/irc )
+# Forums: https://www.spigotmc.org/
+# Bug tracker: https://www.spigotmc.org/go/bugs
+
+
+settings:
+    allow-end: true
+    warn-on-overload: true
+    permissions-file: permissions.yml
+    update-folder: update
+    plugin-profiling: false
+    connection-throttle: 4000
+    query-plugins: true
+    deprecated-verbose: default
+    shutdown-message: Server closed
+    minimum-api: none
+spawn-limits:
+    monsters: 70
+    animals: 10
+    water-animals: 15
+    ambient: 15
+chunk-gc:
+    period-in-ticks: 600
+ticks-per:
+    animal-spawns: 400
+    monster-spawns: 1
+    water-spawns: 1
+    ambient-spawns: 1
+    autosave: 6000
+aliases: now-in-commands.yml
diff --git a/src/main/resources/configurations/commands.yml b/src/main/resources/configurations/commands.yml
new file mode 100644
index 0000000000000000000000000000000000000000..0f45c397df38e8af1c8b5bb8ca24f54a88e5880b
--- /dev/null
+++ b/src/main/resources/configurations/commands.yml
@@ -0,0 +1,17 @@
+# This is the commands configuration file for Bukkit.
+# For documentation on how to make use of this file, check out the Bukkit Wiki at
+# https://www.spigotmc.org/go/commands-yml
+# 
+# If you need help on this file, feel free to join us on irc or leave a message
+# on the forums asking for advice.
+# 
+# IRC: #spigot @ irc.spi.gt
+#    (If this means nothing to you, just go to https://www.spigotmc.org/go/irc )
+# Forums: https://www.spigotmc.org/
+# Bug tracker: https://www.spigotmc.org/go/bugs
+
+command-block-overrides: []
+ignore-vanilla-permissions: false
+aliases:
+    icanhasbukkit:
+      - "version $1-"
diff --git a/src/main/resources/configurations/help.yml b/src/main/resources/configurations/help.yml
new file mode 100644
index 0000000000000000000000000000000000000000..15c3d07070624ad453032a02d8d4d3f26bd6cb8d
--- /dev/null
+++ b/src/main/resources/configurations/help.yml
@@ -0,0 +1,55 @@
+# This is the help configuration file for Bukkit.
+# 
+# By default you do not need to modify this file. Help topics for all plugin commands are automatically provided by
+# or extracted from your installed plugins. You only need to modify this file if you wish to add new help pages to
+# your server or override the help pages of existing plugin commands.
+# 
+# This file is divided up into the following parts:
+# -- general-topics: lists admin defined help topics
+# -- index-topics:   lists admin defined index topics
+# -- amend-topics:   lists topic amendments to apply to existing help topics
+# -- ignore-plugins: lists any plugins that should be excluded from help
+# 
+# Examples are given below. When amending command topic, the string <text> will be replaced with the existing value
+# in the help topic. Color codes can be used in topic text. The color code character is & followed by 0-F.
+# ================================================================
+# 
+# Set this to true to list the individual command help topics in the master help.
+# command-topics-in-master-index: true
+# 
+# Each general topic will show up as a separate topic in the help index along with all the plugin command topics.
+# general-topics:
+#     Rules:
+#         shortText: Rules of the server
+#         fullText: |
+#             &61. Be kind to your fellow players.
+#             &B2. No griefing.
+#             &D3. No swearing.
+#         permission: topics.rules
+# 
+# Each index topic will show up as a separate sub-index in the help index along with all the plugin command topics.
+# To override the default help index (displayed when the user executes /help), name the index topic "Default".
+# index-topics:
+#     Ban Commands:
+#         shortText: Player banning commands
+#         preamble: Moderator - do not abuse these commands
+#         permission: op
+#         commands:
+#             - /ban
+#             - /ban-ip
+#             - /banlist
+# 
+# Topic amendments are used to change the content of automatically generated plugin command topics.
+# amended-topics:
+#     /stop:
+#         shortText: Stops the server cold....in its tracks!
+#         fullText: <text> - This kills the server.
+#         permission: you.dont.have
+# 
+# Any plugin in the ignored plugins list will be excluded from help. The name must match the name displayed by
+# the /plugins command. Ignore "Bukkit" to remove the standard bukkit commands from the index. Ignore "All"
+# to completely disable automatic help topic generation.
+# ignore-plugins:
+#    - PluginNameOne
+#    - PluginNameTwo
+#    - PluginNameThree
diff --git a/src/main/resources/log4j2.component.properties b/src/main/resources/log4j2.component.properties
new file mode 100644
index 0000000000000000000000000000000000000000..30efeb5faf8e7faccf1b252fa0ed6a9fc31c40a7
--- /dev/null
+++ b/src/main/resources/log4j2.component.properties
@@ -0,0 +1,3 @@
+Log4jContextSelector=org.apache.logging.log4j.core.async.AsyncLoggerContextSelector
+log4j2.AsyncQueueFullPolicy="com.destroystokyo.paper.log.LogFullPolicy"
+log4j.skipJansi=true
diff --git a/src/main/resources/log4j2.xml b/src/main/resources/log4j2.xml
new file mode 100644
index 0000000000000000000000000000000000000000..476f4a5cbe664ddd05474cb88553018bd334a5b8
--- /dev/null
+++ b/src/main/resources/log4j2.xml
@@ -0,0 +1,43 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<Configuration status="WARN" packages="com.mojang.util">
+    <Appenders>
+        <Queue name="ServerGuiConsole">
+            <PatternLayout pattern="[%d{HH:mm:ss} %level]: %msg%n" />
+        </Queue>
+        <TerminalConsole name="TerminalConsole">
+            <PatternLayout>
+                <LoggerNamePatternSelector defaultPattern="%highlightError{[%d{HH:mm:ss} %level]: [%logger] %minecraftFormatting{%msg}%n%xEx{full}}">
+                    <!-- Log root, Minecraft, Mojang and Bukkit loggers without prefix -->
+                    <!-- Disable prefix for various plugins that bypass the plugin logger -->
+                    <PatternMatch key=",net.minecraft.,Minecraft,com.mojang.,com.sk89q.,ru.tehkode.,Minecraft.AWE"
+                                  pattern="%highlightError{[%d{HH:mm:ss} %level]: %minecraftFormatting{%msg}%n%xEx{full}}" />
+                </LoggerNamePatternSelector>
+            </PatternLayout>
+        </TerminalConsole>
+        <RollingRandomAccessFile name="File" fileName="logs/latest.log" filePattern="logs/%d{yyyy-MM-dd}-%i.log.gz">
+            <PatternLayout>
+                <LoggerNamePatternSelector defaultPattern="[%d{HH:mm:ss}] [%t/%level]: [%logger] %minecraftFormatting{%msg}{strip}%n%xEx{full}">
+                    <!-- Log root, Minecraft, Mojang and Bukkit loggers without prefix -->
+                    <!-- Disable prefix for various plugins that bypass the plugin logger -->
+                    <PatternMatch key=",net.minecraft.,Minecraft,com.mojang.,com.sk89q.,ru.tehkode.,Minecraft.AWE"
+                                  pattern="[%d{HH:mm:ss}] [%t/%level]: %minecraftFormatting{%msg}{strip}%n%xEx{full}" />
+                </LoggerNamePatternSelector>
+            </PatternLayout>
+            <Policies>
+                <TimeBasedTriggeringPolicy />
+                <OnStartupTriggeringPolicy />
+            </Policies>
+            <DefaultRolloverStrategy max="1000"/>
+        </RollingRandomAccessFile>
+    </Appenders>
+    <Loggers>
+        <Root level="info">
+            <filters>
+                <MarkerFilter marker="NETWORK_PACKETS" onMatch="DENY" onMismatch="NEUTRAL" />
+            </filters>
+            <AppenderRef ref="File"/>
+            <AppenderRef ref="TerminalConsole" level="info"/>
+            <AppenderRef ref="ServerGuiConsole" level="info"/>
+        </Root>
+    </Loggers>
+</Configuration>
