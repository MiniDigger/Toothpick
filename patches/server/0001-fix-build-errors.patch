From 87514ad28365dfe24ae59b2d20100fef17d8b53e Mon Sep 17 00:00:00 2001
From: ysl3000 <yannicklamprecht@live.de>
Date: Sat, 23 May 2020 14:21:22 +0200
Subject: [PATCH] fix-build-errors

---
 .../core/dispenser/DispenseItemBehavior.java  | 17 +++---
 src/main/java/net/minecraft/server/EULA.java  |  8 +--
 .../minecraft/server/level/ServerLevel.java   |  2 +-
 .../network/ServerGamePacketListenerImpl.java |  2 +-
 .../server/players/GameProfileCache.java      |  2 +-
 .../minecraft/server/players/PlayerList.java  |  2 +-
 .../net/minecraft/world/entity/Entity.java    |  8 +--
 .../minecraft/world/entity/LivingEntity.java  |  7 +--
 .../world/entity/animal/SnowGolem.java        |  5 ++
 .../world/entity/animal/horse/Llama.java      |  5 ++
 .../world/entity/boss/wither/WitherBoss.java  |  5 ++
 .../world/entity/decoration/ArmorStand.java   |  5 +-
 .../world/entity/monster/Drowned.java         |  5 ++
 .../world/entity/monster/Illusioner.java      |  5 ++
 .../world/entity/monster/Pillager.java        |  5 ++
 .../minecraft/world/entity/monster/Slime.java | 11 ++--
 .../minecraft/world/entity/monster/Witch.java |  8 ++-
 .../world/entity/monster/WitherSkeleton.java  |  5 ++
 .../world/entity/monster/Zombie.java          |  3 +-
 .../world/entity/monster/ZombieVillager.java  |  3 +-
 .../world/entity/npc/AbstractVillager.java    |  3 +-
 .../minecraft/world/entity/npc/Villager.java  | 37 +++++--------
 .../world/entity/npc/WanderingTrader.java     |  5 ++
 .../minecraft/world/entity/player/Player.java | 13 ++---
 .../saveddata/maps/MapItemSavedData.java      |  2 +-
 .../entries/LootPoolSingletonContainer.java   |  2 +-
 src/main/resources/configurations/bukkit.yml  | 39 +++++++++++++
 .../resources/configurations/commands.yml     | 17 ++++++
 src/main/resources/configurations/help.yml    | 55 +++++++++++++++++++
 .../resources/log4j2.component.properties     |  3 +
 src/main/resources/log4j2.xml                 | 43 +++++++++++++++
 31 files changed, 258 insertions(+), 74 deletions(-)
 create mode 100644 src/main/resources/configurations/bukkit.yml
 create mode 100644 src/main/resources/configurations/commands.yml
 create mode 100644 src/main/resources/configurations/help.yml
 create mode 100644 src/main/resources/log4j2.component.properties
 create mode 100644 src/main/resources/log4j2.xml

diff --git a/src/main/java/net/minecraft/core/dispenser/DispenseItemBehavior.java b/src/main/java/net/minecraft/core/dispenser/DispenseItemBehavior.java
index fd74305dc..f366a548b 100644
--- a/src/main/java/net/minecraft/core/dispenser/DispenseItemBehavior.java
+++ b/src/main/java/net/minecraft/core/dispenser/DispenseItemBehavior.java
@@ -349,7 +349,7 @@ public interface DispenseItemBehavior {
         }));
         DispenserBlock.registerBehavior((ItemLike) Items.FIRE_CHARGE, (DispenseItemBehavior) (new DefaultDispenseItemBehavior() {
             @Override
-            public ItemStack lambda$static$0(BlockSource isourceblock, ItemStack itemstack) {
+            public ItemStack execute(BlockSource isourceblock, ItemStack itemstack) {
                 Direction enumdirection = (Direction) isourceblock.getBlockState().getValue(DispenserBlock.FACING);
                 Position iposition = DispenserBlock.getDispensePosition(isourceblock);
                 double d0 = iposition.x() + (double) ((float) enumdirection.getStepX() * 0.3F);
@@ -592,7 +592,7 @@ public interface DispenseItemBehavior {
         }));
         DispenserBlock.registerBehavior((ItemLike) Items.BONE_MEAL, (DispenseItemBehavior) (new OptionalDispenseItemBehavior() {
             @Override
-            protected ItemStack lambda$static$0(BlockSource isourceblock, ItemStack itemstack) {
+            protected ItemStack execute(BlockSource isourceblock, ItemStack itemstack) {
                 this.success = true;
                 Level world = isourceblock.getLevel();
                 BlockPos blockposition = isourceblock.getPos().relative((Direction) isourceblock.getBlockState().getValue(DispenserBlock.FACING));
@@ -653,7 +653,7 @@ public interface DispenseItemBehavior {
         }));
         DispenserBlock.registerBehavior((ItemLike) Blocks.TNT, (DispenseItemBehavior) (new DefaultDispenseItemBehavior() {
             @Override
-            protected ItemStack lambda$static$0(BlockSource isourceblock, ItemStack itemstack) {
+            protected ItemStack execute(BlockSource isourceblock, ItemStack itemstack) {
                 Level world = isourceblock.getLevel();
                 BlockPos blockposition = isourceblock.getPos().relative((Direction) isourceblock.getBlockState().getValue(DispenserBlock.FACING));
                 // EntityTNTPrimed entitytntprimed = new EntityTNTPrimed(world, (double) blockposition.getX() + 0.5D, (double) blockposition.getY(), (double) blockposition.getZ() + 0.5D, (EntityLiving) null);
@@ -695,7 +695,7 @@ public interface DispenseItemBehavior {
         }));
         OptionalDispenseItemBehavior dispensebehaviormaybe = new OptionalDispenseItemBehavior() {
             @Override
-            protected ItemStack lambda$static$0(BlockSource isourceblock, ItemStack itemstack) {
+            protected ItemStack execute(BlockSource isourceblock, ItemStack itemstack) {
                 this.success = ArmorItem.dispenseArmor(isourceblock, itemstack);
                 return itemstack;
             }
@@ -708,7 +708,7 @@ public interface DispenseItemBehavior {
         DispenserBlock.registerBehavior((ItemLike) Items.PLAYER_HEAD, (DispenseItemBehavior) dispensebehaviormaybe);
         DispenserBlock.registerBehavior((ItemLike) Items.WITHER_SKELETON_SKULL, (DispenseItemBehavior) (new OptionalDispenseItemBehavior() {
             @Override
-            protected ItemStack lambda$static$0(BlockSource isourceblock, ItemStack itemstack) {
+            protected ItemStack execute(BlockSource isourceblock, ItemStack itemstack) {
                 Level world = isourceblock.getLevel();
                 Direction enumdirection = (Direction) isourceblock.getBlockState().getValue(DispenserBlock.FACING);
                 BlockPos blockposition = isourceblock.getPos().relative(enumdirection);
@@ -754,9 +754,9 @@ public interface DispenseItemBehavior {
                 return itemstack;
             }
         }));
-        DispenserBlock.registerBehavior((ItemLike) Blocks.CARVED_PUMPKIN, (DispenseItemBehavior) (new OptionalDispenseItemBehavior() {
+        DispenserBlock.registerBehavior(Blocks.CARVED_PUMPKIN, new OptionalDispenseItemBehavior() {
             @Override
-            protected ItemStack lambda$static$0(BlockSource isourceblock, ItemStack itemstack) {
+            protected ItemStack execute(BlockSource isourceblock, ItemStack itemstack) {
                 Level world = isourceblock.getLevel();
                 BlockPos blockposition = isourceblock.getPos().relative((Direction) isourceblock.getBlockState().getValue(DispenserBlock.FACING));
                 CarvedPumpkinBlock blockpumpkincarved = (CarvedPumpkinBlock) Blocks.CARVED_PUMPKIN;
@@ -798,7 +798,7 @@ public interface DispenseItemBehavior {
 
                 return itemstack;
             }
-        }));
+        });
         DispenserBlock.registerBehavior((ItemLike) Blocks.SHULKER_BOX.asItem(), (DispenseItemBehavior) (new ShulkerBoxDispenseBehavior()));
         DyeColor[] aenumcolor = DyeColor.values();
         int i = aenumcolor.length;
@@ -825,7 +825,6 @@ public interface DispenseItemBehavior {
                 }
             }
 
-            @Override
             public ItemStack lambda$static$0(BlockSource isourceblock, ItemStack itemstack) {
                 this.success = false;
                 Level world = isourceblock.getLevel();
diff --git a/src/main/java/net/minecraft/server/EULA.java b/src/main/java/net/minecraft/server/EULA.java
index e9452d551..48d97ea03 100644
--- a/src/main/java/net/minecraft/server/EULA.java
+++ b/src/main/java/net/minecraft/server/EULA.java
@@ -8,13 +8,13 @@ import net.minecraft.SharedConstants;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public class Eula {
+public class EULA {
 
     private static final Logger LOGGER = LogManager.getLogger();
     private final java.nio.file.Path file;
     private final boolean agreed;
 
-    public Eula(java.nio.file.Path java_nio_file_path) {
+    public EULA(java.nio.file.Path java_nio_file_path) {
         this.file = java_nio_file_path;
         this.agreed = SharedConstants.IS_RUNNING_IN_IDE || this.readFile();
     }
@@ -51,7 +51,7 @@ public class Eula {
 
             return flag;
         } catch (Exception exception) {
-            Eula.LOGGER.warn("Failed to load {}", this.file);
+            LOGGER.warn("Failed to load {}", this.file);
             this.saveDefaults();
             return false;
         }
@@ -90,7 +90,7 @@ public class Eula {
 
                 }
             } catch (Exception exception) {
-                Eula.LOGGER.warn("Failed to save {}", this.file, exception);
+                LOGGER.warn("Failed to save {}", this.file, exception);
             }
 
         }
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 81596fbf1..996a1f631 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -1738,7 +1738,7 @@ public class ServerLevel extends net.minecraft.world.level.Level {
         this.getChunkSourceOH().broadcastIncludingSelf(entity, new ClientboundEntityEventPacket(entity, b0));
     }
 
-    @Override
+    // @Override
     public ServerChunkCache getChunkSourceOH() {
         return (ServerChunkCache) super.getChunkSource();
     }
diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index 7ca80f0a2..1df706fd8 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -212,7 +212,7 @@ public class ServerGamePacketListenerImpl implements ServerGamePacketListener {
     private long keepAliveChallenge; private void setKeepAliveID(long keepAliveID) { this.keepAliveChallenge = keepAliveID;}; private long getKeepAliveID() {return this.keepAliveChallenge; };  // Paper - OBFHELPER
     // CraftBukkit start - multithreaded fields
     private volatile int chatSpamTickCount;
-    private static final AtomicIntegerFieldUpdater chatSpamField = AtomicIntegerFieldUpdater.newUpdater(ServerGamePacketListenerImpl.class, "chatThrottle");
+    private static final AtomicIntegerFieldUpdater chatSpamField = AtomicIntegerFieldUpdater.newUpdater(ServerGamePacketListenerImpl.class, "chatSpamTickCount");
     private final java.util.concurrent.atomic.AtomicInteger tabSpamLimiter = new java.util.concurrent.atomic.AtomicInteger(); // Paper - configurable tab spam limits
     // CraftBukkit end
     private int dropSpamTickCount;
diff --git a/src/main/java/net/minecraft/server/players/GameProfileCache.java b/src/main/java/net/minecraft/server/players/GameProfileCache.java
index 3b661ac25..0d8ebc1b1 100644
--- a/src/main/java/net/minecraft/server/players/GameProfileCache.java
+++ b/src/main/java/net/minecraft/server/players/GameProfileCache.java
@@ -344,7 +344,7 @@ public class GameProfileCache {
                             return null;
                         }
 
-                        return GameProfileCache.this.new net.minecraft.server.players.GameProfileCache.UserCacheEntry(new GameProfile(uuid, s1), date);
+                        return GameProfileCache.this.new UserCacheEntry(new GameProfile(uuid, s1), date);
                     } else {
                         return null;
                     }
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index 4594222d6..206f4b0fc 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -194,7 +194,7 @@ public abstract class PlayerList {
         // PlayerList.LOGGER.info("{}[{}] logged in with entity id {} at ({}, {}, {})", entityplayer.getDisplayName().getString(), s1, entityplayer.getId(), entityplayer.locX(), entityplayer.locY(), entityplayer.locZ());
         LevelData worlddata = worldserver.getLevelData();
 
-        this.updatePlayerGameMode(entityplayer, (ServerPlayer) null, worldserver);
+        this.updatePlayerGameMode(entityplayer, null, worldserver);
         ServerGamePacketListenerImpl playerconnection = new ServerGamePacketListenerImpl(this.server, networkmanager, entityplayer);
         GameRules gamerules = worldserver.getGameRules();
         boolean flag = gamerules.getBoolean(GameRules.RULE_DO_IMMEDIATE_RESPAWN);
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 6b3e5eeed..bfeb917c9 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -311,11 +311,11 @@ public abstract class Entity implements Nameable, CommandSource, KeyedObject { /
         Boolean hardCollides = cachedOverrides.get(this.getClass());
         if (hardCollides == null) {
             try {
-                Object getHardCollisionBoxMethod = Entity.class.getMethod("au");
-                Object getHardCollisionBoxEntityMethod = Entity.class.getMethod("j", Entity.class);
-                if (!this.getClass().getMethod("au").equals(getHardCollisionBoxMethod)) {
+                Object getHardCollisionBoxMethod = Entity.class.getMethod("getCollideBox");
+                Object getHardCollisionBoxEntityMethod = Entity.class.getMethod("getCollideAgainstBox", Entity.class);
+                if (!this.getClass().getMethod("getCollideBox").equals(getHardCollisionBoxMethod)) {
                     hardCollides = Boolean.TRUE;
-                } else if (!this.getClass().getMethod("j", Entity.class).equals(getHardCollisionBoxEntityMethod)) {
+                } else if (!this.getClass().getMethod("getCollideAgainstBox", Entity.class).equals(getHardCollisionBoxEntityMethod)) {
                     hardCollides = Boolean.TRUE;
                 } else {
                     hardCollides = Boolean.FALSE;
diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index ad8a93ead..041999053 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -118,7 +118,6 @@ import org.bukkit.Location;
 import org.bukkit.craftbukkit.attribute.CraftAttributeMap;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
-import org.bukkit.entity.LivingEntity;
 import org.bukkit.entity.Player;
 import org.bukkit.event.entity.EntityDamageEvent;
 import org.bukkit.event.entity.EntityDamageEvent.DamageModifier;
@@ -1297,7 +1296,7 @@ public abstract class LivingEntity extends Entity {
                 }
             }
 
-            EntityResurrectEvent event = new EntityResurrectEvent((LivingEntity) this.getBukkitEntity());
+            EntityResurrectEvent event = new EntityResurrectEvent((org.bukkit.entity.LivingEntity) this.getBukkitEntity());
             event.setCancelled(itemstack == null);
             this.level.getServerOH().getPluginManager().callEvent(event);
 
@@ -1539,7 +1538,7 @@ public abstract class LivingEntity extends Entity {
         if (this.random.nextDouble() >= this.getAttribute(SharedMonsterAttributes.KNOCKBACK_RESISTANCE).getValue()) {
             this.hasImpulse = true;
             Vec3 vec3d = this.getDeltaMovement();
-            Vec3 vec3d1 = (new Vec3(d0, 0.0D, d1)).normalize().scale((double) f);
+            Vec3 vec3d1 = (new Vec3(d0, 0.0D, d1)).normalize().scale(f);
 
             this.setDeltaMovement(vec3d.x / 2.0D - vec3d1.x, this.onGround ? Math.min(0.4D, vec3d.y / 2.0D + (double) f) : vec3d.y, vec3d.z / 2.0D - vec3d1.z);
 
@@ -1548,7 +1547,7 @@ public abstract class LivingEntity extends Entity {
             org.bukkit.util.Vector delta = new org.bukkit.util.Vector(currentMot.x - vec3d.x, currentMot.y - vec3d.y, currentMot.z - vec3d.z);
             // Restore old velocity to be able to access it in the event
             this.setDeltaMovement(vec3d);
-            if (entity == null || new com.destroystokyo.paper.event.entity.EntityKnockbackByEntityEvent((LivingEntity) getBukkitEntity(), entity.getBukkitEntity(), f, delta).callEvent()) {
+            if (entity == null || new com.destroystokyo.paper.event.entity.EntityKnockbackByEntityEvent((org.bukkit.entity.LivingEntity) getBukkitEntity(), entity.getBukkitEntity(), f, delta).callEvent()) {
                 this.setDeltaMovement(vec3d.x + delta.getX(), vec3d.y + delta.getY(), vec3d.z + delta.getZ());
             }
             // Paper end
diff --git a/src/main/java/net/minecraft/world/entity/animal/SnowGolem.java b/src/main/java/net/minecraft/world/entity/animal/SnowGolem.java
index e9fc17788..7da3f3df6 100644
--- a/src/main/java/net/minecraft/world/entity/animal/SnowGolem.java
+++ b/src/main/java/net/minecraft/world/entity/animal/SnowGolem.java
@@ -134,6 +134,11 @@ public class SnowGolem extends AbstractGolem implements RangedAttackMob {
         this.level.addFreshEntity(entitysnowball);
     }
 
+    @Override
+    public void q(boolean flag) {
+        this.setAggressive(flag);
+    }
+
     @Override
     protected float getStandingEyeHeight(Pose entitypose, EntityDimensions entitysize) {
         return 1.7F;
diff --git a/src/main/java/net/minecraft/world/entity/animal/horse/Llama.java b/src/main/java/net/minecraft/world/entity/animal/horse/Llama.java
index a5687d9c7..392c59531 100644
--- a/src/main/java/net/minecraft/world/entity/animal/horse/Llama.java
+++ b/src/main/java/net/minecraft/world/entity/animal/horse/Llama.java
@@ -461,6 +461,11 @@ public class Llama extends AbstractChestedHorse implements RangedAttackMob {
         this.spit(entityliving);
     }
 
+    @Override
+    public void q(boolean flag) {
+        this.setAggressive(flag);
+    }
+
     static class LlamaAttackWolfGoal extends NearestAttackableTargetGoal<Wolf> {
 
         public LlamaAttackWolfGoal(Llama entityllama) {
diff --git a/src/main/java/net/minecraft/world/entity/boss/wither/WitherBoss.java b/src/main/java/net/minecraft/world/entity/boss/wither/WitherBoss.java
index 07633677f..7bece2562 100644
--- a/src/main/java/net/minecraft/world/entity/boss/wither/WitherBoss.java
+++ b/src/main/java/net/minecraft/world/entity/boss/wither/WitherBoss.java
@@ -485,6 +485,11 @@ public class WitherBoss extends Monster implements RangedAttackMob {
         this.performRangedAttack(0, entityliving);
     }
 
+    @Override
+    public void q(boolean flag) {
+        this.setAggressive(flag);
+    }
+
     @Override
     public boolean hurt(DamageSource damagesource, float f) {
         if (this.isInvulnerableTo(damagesource)) {
diff --git a/src/main/java/net/minecraft/world/entity/decoration/ArmorStand.java b/src/main/java/net/minecraft/world/entity/decoration/ArmorStand.java
index 9baeb30fc..27c870988 100644
--- a/src/main/java/net/minecraft/world/entity/decoration/ArmorStand.java
+++ b/src/main/java/net/minecraft/world/entity/decoration/ArmorStand.java
@@ -38,12 +38,11 @@ import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.material.PushReaction;
 import net.minecraft.world.phys.Vec3;
 // CraftBukkit start
-import org.bukkit.inventory.EquipmentSlot;
 import org.bukkit.craftbukkit.CraftEquipmentSlot;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
-import org.bukkit.entity.ArmorStand;
 import org.bukkit.entity.Player;
 import org.bukkit.event.player.PlayerArmorStandManipulateEvent;
+import org.bukkit.inventory.EquipmentSlot;
 // CraftBukkit end
 
 public class ArmorStand extends LivingEntity {
@@ -451,7 +450,7 @@ public class ArmorStand extends LivingEntity {
             org.bukkit.inventory.ItemStack playerHeldItem = CraftItemStack.asCraftMirror(itemstack);
 
             Player player = (Player) entityhuman.getBukkitEntity();
-            ArmorStand self = (ArmorStand) this.getBukkitEntity();
+            org.bukkit.entity.ArmorStand self = (org.bukkit.entity.ArmorStand) this.getBukkitEntity();
 
             EquipmentSlot slot = CraftEquipmentSlot.getSlot(enumitemslot);
             PlayerArmorStandManipulateEvent armorStandManipulateEvent = new PlayerArmorStandManipulateEvent(player,self,playerHeldItem,armorStandItem,slot);
diff --git a/src/main/java/net/minecraft/world/entity/monster/Drowned.java b/src/main/java/net/minecraft/world/entity/monster/Drowned.java
index f2e92eb52..5db045560 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Drowned.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Drowned.java
@@ -242,6 +242,11 @@ public class Drowned extends Zombie implements RangedAttackMob {
         this.level.addFreshEntity(entitythrowntrident);
     }
 
+    @Override
+    public void q(boolean flag) {
+        setChargingAttack(flag);
+    }
+
     public void setSearchingForLand(boolean flag) {
         this.searchingForLand = flag;
     }
diff --git a/src/main/java/net/minecraft/world/entity/monster/Illusioner.java b/src/main/java/net/minecraft/world/entity/monster/Illusioner.java
index 94d867f36..c2e45a912 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Illusioner.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Illusioner.java
@@ -188,6 +188,11 @@ public class Illusioner extends SpellcasterIllager implements RangedAttackMob {
         // Paper end
     }
 
+    @Override
+    public void q(boolean flag) {
+        setChargingAttack(flag);
+    }
+
     class IllusionerBlindnessSpellGoal extends SpellcasterIllager.SpellcasterUseSpellGoal {
 
         private int lastTargetId;
diff --git a/src/main/java/net/minecraft/world/entity/monster/Pillager.java b/src/main/java/net/minecraft/world/entity/monster/Pillager.java
index f1211537d..8ee656d28 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Pillager.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Pillager.java
@@ -198,6 +198,11 @@ public class Pillager extends AbstractIllager implements CrossbowAttackMob, Rang
         this.noActionTime = 0;
     }
 
+    @Override
+    public void q(boolean flag) {
+        this.entityData.set(IS_CHARGING_CROSSBOW, flag);
+    }
+
     @Override
     public void shootProjectile(LivingEntity entityliving, ItemStack itemstack, Projectile iprojectile, float f) {
         Entity entity = (Entity) iprojectile;
diff --git a/src/main/java/net/minecraft/world/entity/monster/Slime.java b/src/main/java/net/minecraft/world/entity/monster/Slime.java
index 8d24fb86f..7f3ca4c92 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Slime.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Slime.java
@@ -45,7 +45,6 @@ import com.destroystokyo.paper.event.entity.SlimeSwimEvent;
 import com.destroystokyo.paper.event.entity.SlimeTargetLivingEntityEvent;
 import com.destroystokyo.paper.event.entity.SlimeWanderEvent;
 import org.bukkit.entity.LivingEntity;
-import org.bukkit.entity.Slime;
 // Paper end
 // CraftBukkit start
 import java.util.ArrayList;
@@ -407,7 +406,7 @@ public class Slime extends Mob implements Enemy {
 
         @Override
         public boolean canUse() {
-            return !this.a.isPassenger() && this.a.canWander && new SlimeWanderEvent((Slime) this.a.getBukkitEntity()).callEvent(); // Paper
+            return !this.a.isPassenger() && this.a.canWander && new SlimeWanderEvent((org.bukkit.entity.Slime) this.a.getBukkitEntity()).callEvent(); // Paper
         }
 
         @Override
@@ -428,7 +427,7 @@ public class Slime extends Mob implements Enemy {
 
         @Override
         public boolean canUse() {
-            return (this.a.isInWater() || this.a.isInLava()) && this.a.getMoveControl() instanceof net.minecraft.world.entity.monster.Slime.ControllerMoveSlime && this.a.canWander && new SlimeSwimEvent((Slime) this.a.getBukkitEntity()).callEvent(); // Paper
+            return (this.a.isInWater() || this.a.isInLava()) && this.a.getMoveControl() instanceof net.minecraft.world.entity.monster.Slime.ControllerMoveSlime && this.a.canWander && new SlimeSwimEvent((org.bukkit.entity.Slime) this.a.getBukkitEntity()).callEvent(); // Paper
         }
 
         @Override
@@ -462,7 +461,7 @@ public class Slime extends Mob implements Enemy {
             if (--this.c <= 0) {
                 this.c = 40 + this.a.getRandom().nextInt(60);
                 // Paper start
-                SlimeChangeDirectionEvent event = new SlimeChangeDirectionEvent((Slime) this.a.getBukkitEntity(), (float) this.a.getRandom().nextInt(360));
+                SlimeChangeDirectionEvent event = new SlimeChangeDirectionEvent((org.bukkit.entity.Slime) this.a.getBukkitEntity(), (float) this.a.getRandom().nextInt(360));
                 if (!this.a.canWander || !event.callEvent()) return;
                 this.b = event.getNewYaw();
                 // Paper end
@@ -493,7 +492,7 @@ public class Slime extends Mob implements Enemy {
             if (entityliving instanceof Player && ((Player) entityliving).abilities.invulnerable) {
                 return false;
             }
-            return this.a.getMoveControl() instanceof net.minecraft.world.entity.monster.Slime.ControllerMoveSlime && this.a.canWander && new SlimeTargetLivingEntityEvent((Slime) this.a.getBukkitEntity(), (LivingEntity) entityliving.getBukkitEntity()).callEvent();
+            return this.a.getMoveControl() instanceof net.minecraft.world.entity.monster.Slime.ControllerMoveSlime && this.a.canWander && new SlimeTargetLivingEntityEvent((org.bukkit.entity.Slime) this.a.getBukkitEntity(), (LivingEntity) entityliving.getBukkitEntity()).callEvent();
             // Paper end
         }
 
@@ -514,7 +513,7 @@ public class Slime extends Mob implements Enemy {
             if (entityliving instanceof Player && ((Player) entityliving).abilities.invulnerable) {
                 return false;
             }
-            return --this.b > 0 && this.a.canWander && new SlimeTargetLivingEntityEvent((Slime) this.a.getBukkitEntity(), (LivingEntity) entityliving.getBukkitEntity()).callEvent();
+            return --this.b > 0 && this.a.canWander && new SlimeTargetLivingEntityEvent((org.bukkit.entity.Slime) this.a.getBukkitEntity(), (LivingEntity) entityliving.getBukkitEntity()).callEvent();
             // Paper end
         }
 
diff --git a/src/main/java/net/minecraft/world/entity/monster/Witch.java b/src/main/java/net/minecraft/world/entity/monster/Witch.java
index 44cbf0acf..71e2e91b5 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Witch.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Witch.java
@@ -3,7 +3,6 @@ package net.minecraft.world.entity.monster;
 // Paper start
 import com.destroystokyo.paper.event.entity.WitchReadyPotionEvent;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
-import org.bukkit.entity.Witch;
 // Paper end
 
 import java.util.Iterator;
@@ -192,7 +191,7 @@ public class Witch extends Raider implements RangedAttackMob {
 
     // Paper start
     public void setDrinkingPotion(ItemStack potion) {
-        setItemSlot(EquipmentSlot.MAINHAND, CraftItemStack.asNMSCopy(WitchReadyPotionEvent.process((Witch) getBukkitEntity(), CraftItemStack.asCraftMirror(potion))));
+        setItemSlot(EquipmentSlot.MAINHAND, CraftItemStack.asNMSCopy(WitchReadyPotionEvent.process((org.bukkit.entity.Witch) getBukkitEntity(), CraftItemStack.asCraftMirror(potion))));
         setPotionUseTimeLeft(getMainHandItem().getItemUseMaxDuration());
         setDrinkingPotion(true);
         level.sendSoundEffect(null, getX(), getY(), getZ(), SoundEvents.WITCH_DRINK, getSoundSource(), 1.0F, 0.8F + random.nextFloat() * 0.4F);
@@ -264,6 +263,11 @@ public class Witch extends Raider implements RangedAttackMob {
         }
     }
 
+    @Override
+    public void q(boolean flag) {
+        setUsingItem(flag);
+    }
+
     @Override
     protected float getStandingEyeHeight(Pose entitypose, EntityDimensions entitysize) {
         return 1.62F;
diff --git a/src/main/java/net/minecraft/world/entity/monster/WitherSkeleton.java b/src/main/java/net/minecraft/world/entity/monster/WitherSkeleton.java
index 8b7f30194..c56e6fe41 100644
--- a/src/main/java/net/minecraft/world/entity/monster/WitherSkeleton.java
+++ b/src/main/java/net/minecraft/world/entity/monster/WitherSkeleton.java
@@ -115,4 +115,9 @@ public class WitherSkeleton extends AbstractSkeleton {
     public boolean canBeAffected(MobEffectInstance mobeffect) {
         return mobeffect.getEffect() == MobEffects.WITHER ? false : super.canBeAffected(mobeffect);
     }
+
+    @Override
+    public void q(boolean flag) {
+        this.setAggressive(flag);
+    }
 }
diff --git a/src/main/java/net/minecraft/world/entity/monster/Zombie.java b/src/main/java/net/minecraft/world/entity/monster/Zombie.java
index fb54868ab..9c3087c71 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Zombie.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Zombie.java
@@ -68,7 +68,6 @@ import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.state.BlockState;
 // CraftBukkit start
 import org.bukkit.craftbukkit.event.CraftEventFactory;
-import org.bukkit.entity.Zombie;
 import org.bukkit.event.entity.CreatureSpawnEvent;
 import org.bukkit.event.entity.EntityCombustByEntityEvent;
 import org.bukkit.event.entity.EntityTargetEvent;
@@ -321,7 +320,7 @@ public class Zombie extends Monster {
             entityzombie.setInvulnerable(this.isInvulnerable());
             // CraftBukkit start
             if (CraftEventFactory.callEntityTransformEvent(this, entityzombie, EntityTransformEvent.TransformReason.DROWNED).isCancelled()) {
-                ((Zombie) getBukkitEntity()).setConversionTime(-1); // SPIGOT-5208: End conversion to stop event spam
+                ((org.bukkit.entity.Zombie) getBukkitEntity()).setConversionTime(-1); // SPIGOT-5208: End conversion to stop event spam
                 return;
             }
             // CraftBukkit end
diff --git a/src/main/java/net/minecraft/world/entity/monster/ZombieVillager.java b/src/main/java/net/minecraft/world/entity/monster/ZombieVillager.java
index 2035a4274..33de1ed26 100644
--- a/src/main/java/net/minecraft/world/entity/monster/ZombieVillager.java
+++ b/src/main/java/net/minecraft/world/entity/monster/ZombieVillager.java
@@ -46,7 +46,6 @@ import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
 // CraftBukkit start
 import org.bukkit.craftbukkit.event.CraftEventFactory;
-import org.bukkit.entity.ZombieVillager;
 import org.bukkit.event.entity.EntityTransformEvent;
 // CraftBukkit end
 
@@ -235,7 +234,7 @@ public class ZombieVillager extends Zombie implements VillagerDataHolder {
         entityvillager.setInvulnerable(this.isInvulnerable());
         // CraftBukkit start
         if (CraftEventFactory.callEntityTransformEvent(this, entityvillager, EntityTransformEvent.TransformReason.CURED).isCancelled()) {
-            ((ZombieVillager) getBukkitEntity()).setConversionTime(-1); // SPIGOT-5208: End conversion to stop event spam
+            ((org.bukkit.entity.ZombieVillager) getBukkitEntity()).setConversionTime(-1); // SPIGOT-5208: End conversion to stop event spam
             return;
         }
         if (!new com.destroystokyo.paper.event.entity.EntityTransformedEvent(this.getBukkitEntity(), entityvillager.getBukkitEntity(), com.destroystokyo.paper.event.entity.EntityTransformedEvent.TransformedReason.CURED).callEvent()) return; // Paper
diff --git a/src/main/java/net/minecraft/world/entity/npc/AbstractVillager.java b/src/main/java/net/minecraft/world/entity/npc/AbstractVillager.java
index f15203761..628b05628 100644
--- a/src/main/java/net/minecraft/world/entity/npc/AbstractVillager.java
+++ b/src/main/java/net/minecraft/world/entity/npc/AbstractVillager.java
@@ -35,7 +35,6 @@ import net.minecraft.world.level.dimension.DimensionType;
 import org.bukkit.Bukkit;
 import org.bukkit.craftbukkit.inventory.CraftMerchant;
 import org.bukkit.craftbukkit.inventory.CraftMerchantRecipe;
-import org.bukkit.entity.AbstractVillager;
 import org.bukkit.event.entity.VillagerAcquireTradeEvent;
 // CraftBukkit end
 
@@ -274,7 +273,7 @@ public abstract class AbstractVillager extends AgableMob implements Npc, Merchan
 
             if (merchantrecipe != null) {
                 // CraftBukkit start
-                VillagerAcquireTradeEvent event = new VillagerAcquireTradeEvent((AbstractVillager) getBukkitEntity(), merchantrecipe.asBukkit());
+                VillagerAcquireTradeEvent event = new VillagerAcquireTradeEvent((org.bukkit.entity.AbstractVillager) getBukkitEntity(), merchantrecipe.asBukkit());
                 // Suppress during worldgen
                 if (this.valid) {
                     Bukkit.getPluginManager().callEvent(event);
diff --git a/src/main/java/net/minecraft/world/entity/npc/Villager.java b/src/main/java/net/minecraft/world/entity/npc/Villager.java
index 826abafd6..e88299cd4 100644
--- a/src/main/java/net/minecraft/world/entity/npc/Villager.java
+++ b/src/main/java/net/minecraft/world/entity/npc/Villager.java
@@ -7,15 +7,6 @@ import com.mojang.datafixers.Dynamic;
 import com.mojang.datafixers.types.DynamicOps;
 import com.mojang.datafixers.util.Pair;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.Optional;
-import java.util.Set;
-import java.util.Map.Entry;
-import java.util.function.BiPredicate;
-import java.util.stream.Collectors;
-import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.GlobalPos;
 import net.minecraft.core.Registry;
@@ -42,14 +33,7 @@ import net.minecraft.world.SimpleContainer;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.effect.MobEffectInstance;
 import net.minecraft.world.effect.MobEffects;
-import net.minecraft.world.entity.AgableMob;
-import net.minecraft.world.entity.Entity;
-import net.minecraft.world.entity.EntityType;
-import net.minecraft.world.entity.ExperienceOrb;
-import net.minecraft.world.entity.LivingEntity;
-import net.minecraft.world.entity.MobSpawnType;
-import net.minecraft.world.entity.ReputationEventHandler;
-import net.minecraft.world.entity.SpawnGroupData;
+import net.minecraft.world.entity.*;
 import net.minecraft.world.entity.ai.Brain;
 import net.minecraft.world.entity.ai.behavior.VillagerGoalPackages;
 import net.minecraft.world.entity.ai.gossip.GossipContainer;
@@ -80,15 +64,17 @@ import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.LevelReader;
 import net.minecraft.world.phys.AABB;
-// CraftBukkit start
 import org.bukkit.Bukkit;
-import org.bukkit.craftbukkit.entity.CraftVillager;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
-import org.bukkit.craftbukkit.inventory.CraftMerchantRecipe;
-import org.bukkit.entity.Villager;
 import org.bukkit.event.entity.EntityTransformEvent;
-import org.bukkit.event.entity.VillagerAcquireTradeEvent;
 import org.bukkit.event.entity.VillagerReplenishTradeEvent;
+
+import javax.annotation.Nullable;
+import java.util.*;
+import java.util.function.BiPredicate;
+import java.util.stream.Collectors;
+
+// CraftBukkit start
 // CraftBukkit end
 
 public class Villager extends AbstractVillager implements ReputationEventHandler, VillagerDataHolder {
@@ -317,6 +303,11 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
 
     }
 
+    @Override
+    public Level getLevel() {
+        return this.level;
+    }
+
     @Override
     protected void stopTrading() {
         super.stopTrading();
@@ -440,7 +431,7 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
 
                 // CraftBukkit start
                 int bonus = -Mth.floor((float) i * merchantrecipe.getPriceMultiplier());
-                VillagerReplenishTradeEvent event = new VillagerReplenishTradeEvent((Villager) this.getBukkitEntity(), merchantrecipe.asBukkit(), bonus);
+                VillagerReplenishTradeEvent event = new VillagerReplenishTradeEvent((org.bukkit.entity.Villager) this.getBukkitEntity(), merchantrecipe.asBukkit(), bonus);
                 Bukkit.getPluginManager().callEvent(event);
                 if (!event.isCancelled()) {
                     merchantrecipe.addToSpecialPriceDiff(event.getBonus());
diff --git a/src/main/java/net/minecraft/world/entity/npc/WanderingTrader.java b/src/main/java/net/minecraft/world/entity/npc/WanderingTrader.java
index 2a13ed619..c5c58a520 100644
--- a/src/main/java/net/minecraft/world/entity/npc/WanderingTrader.java
+++ b/src/main/java/net/minecraft/world/entity/npc/WanderingTrader.java
@@ -92,6 +92,11 @@ public class WanderingTrader extends net.minecraft.world.entity.npc.AbstractVill
         return null;
     }
 
+    @Override
+    public Level getLevel() {
+        return this.level;
+    }
+
     @Override
     public boolean showProgressBar() {
         return false;
diff --git a/src/main/java/net/minecraft/world/entity/player/Player.java b/src/main/java/net/minecraft/world/entity/player/Player.java
index 8c496bc85..7cd77da3b 100644
--- a/src/main/java/net/minecraft/world/entity/player/Player.java
+++ b/src/main/java/net/minecraft/world/entity/player/Player.java
@@ -113,7 +113,6 @@ import net.minecraft.world.scores.Scoreboard;
 import org.bukkit.craftbukkit.entity.CraftHumanEntity;
 import org.bukkit.craftbukkit.util.CraftVector;
 import org.bukkit.entity.Item;
-import org.bukkit.entity.Player;
 import org.bukkit.event.entity.CreatureSpawnEvent;
 import org.bukkit.event.entity.EntityCombustByEntityEvent;
 import org.bukkit.event.player.PlayerBedLeaveEvent;
@@ -694,7 +693,7 @@ public abstract class Player extends LivingEntity {
             }
 
             // CraftBukkit start - fire PlayerDropItemEvent
-            Player player = (Player) this.getBukkitEntity();
+            org.bukkit.entity.Player player = (org.bukkit.entity.Player) this.getBukkitEntity();
             Item drop = (Item) entityitem.getBukkitEntity();
 
             PlayerDropItemEvent event = new PlayerDropItemEvent(player, drop);
@@ -1152,7 +1151,7 @@ public abstract class Player extends LivingEntity {
                 f *= 0.2F + f2 * f2 * 0.8F;
                 f1 *= f2;
                 // Paper start - PlayerAttackEntityCooldownResetEvent
-                if (new com.destroystokyo.paper.event.player.PlayerAttackEntityCooldownResetEvent((Player) this.getBukkitEntity(), entity.getBukkitEntity(), this.getCooledAttackStrength(0F)).callEvent()) {
+                if (new com.destroystokyo.paper.event.player.PlayerAttackEntityCooldownResetEvent((org.bukkit.entity.Player) this.getBukkitEntity(), entity.getBukkitEntity(), this.getCooledAttackStrength(0F)).callEvent()) {
                     this.resetCooldown(); // reset it like normal
                 }
                 // Paper end
@@ -1250,7 +1249,7 @@ public abstract class Player extends LivingEntity {
                         if (entity instanceof ServerPlayer && entity.hurtMarked) {
                             // CraftBukkit start - Add Velocity Event
                             boolean cancelled = false;
-                            Player player = (Player) entity.getBukkitEntity();
+                            org.bukkit.entity.Player player = (org.bukkit.entity.Player) entity.getBukkitEntity();
                             org.bukkit.util.Vector velocity = CraftVector.toBukkit(vec3d);
 
                             PlayerVelocityEvent event = new PlayerVelocityEvent(player, velocity.clone());
@@ -1457,7 +1456,7 @@ public abstract class Player extends LivingEntity {
             bedResult = Either.right(Unit.INSTANCE);
         }
 
-        if (this.getBukkitEntity() instanceof Player) {
+        if (this.getBukkitEntity() instanceof org.bukkit.entity.Player) {
             bedResult = org.bukkit.craftbukkit.event.CraftEventFactory.callPlayerBedEnterEvent(this, blockposition, bedResult);
 
             if (bedResult.left().isPresent()) {
@@ -1506,8 +1505,8 @@ public abstract class Player extends LivingEntity {
         }
 
         // CraftBukkit start - fire PlayerBedLeaveEvent
-        if (this.getBukkitEntity() instanceof Player) {
-            Player player = (Player) this.getBukkitEntity();
+        if (this.getBukkitEntity() instanceof org.bukkit.entity.Player) {
+            org.bukkit.entity.Player player = (org.bukkit.entity.Player) this.getBukkitEntity();
 
             org.bukkit.block.Block bed;
             if (bedPosition != null) {
diff --git a/src/main/java/net/minecraft/world/level/saveddata/maps/MapItemSavedData.java b/src/main/java/net/minecraft/world/level/saveddata/maps/MapItemSavedData.java
index cd0d98190..26ed6973a 100644
--- a/src/main/java/net/minecraft/world/level/saveddata/maps/MapItemSavedData.java
+++ b/src/main/java/net/minecraft/world/level/saveddata/maps/MapItemSavedData.java
@@ -446,7 +446,7 @@ public class MapItemSavedData extends SavedData {
 
         // Paper start
         private void addSeenPlayers(java.util.Collection<MapDecoration> icons) {
-            org.bukkit.entity.Player player = (org.bukkit.entity.Player) player.getBukkitEntity();
+            org.bukkit.entity.Player player = (org.bukkit.entity.Player) this.player.getBukkitEntity();
             MapItemSavedData.this.decorations.forEach((name, mapIcon) -> {
                 // If this cursor is for a player check visibility with vanish system
                 org.bukkit.entity.Player other = org.bukkit.Bukkit.getPlayerExact(name); // Spigot
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/entries/LootPoolSingletonContainer.java b/src/main/java/net/minecraft/world/level/storage/loot/entries/LootPoolSingletonContainer.java
index 51aaaa44e..968db1ab1 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/entries/LootPoolSingletonContainer.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/entries/LootPoolSingletonContainer.java
@@ -166,7 +166,7 @@ public abstract class LootPoolSingletonContainer extends LootPoolEntryContainer
             }
             // This is vanilla
             float qualityModifer = (float) getQuality() * f;
-            double baseWeight = (getWeight() + qualityModifer);
+            double baseWeight = (LootPoolSingletonContainer.this.getWeight() + qualityModifer);
             if (com.destroystokyo.paper.PaperConfig.useAlternativeLuckFormula) {
                 // Random boost to avoid losing precision in the final int cast on return
                 final int weightBoost = 100;
diff --git a/src/main/resources/configurations/bukkit.yml b/src/main/resources/configurations/bukkit.yml
new file mode 100644
index 000000000..e9cee1713
--- /dev/null
+++ b/src/main/resources/configurations/bukkit.yml
@@ -0,0 +1,39 @@
+# This is the main configuration file for Bukkit.
+# As you can see, there's actually not that much to configure without any plugins.
+# For a reference for any variable inside this file, check out the Bukkit Wiki at
+# https://www.spigotmc.org/go/bukkit-yml
+# 
+# If you need help on this file, feel free to join us on irc or leave a message
+# on the forums asking for advice.
+# 
+# IRC: #spigot @ irc.spi.gt
+#    (If this means nothing to you, just go to https://www.spigotmc.org/go/irc )
+# Forums: https://www.spigotmc.org/
+# Bug tracker: https://www.spigotmc.org/go/bugs
+
+
+settings:
+    allow-end: true
+    warn-on-overload: true
+    permissions-file: permissions.yml
+    update-folder: update
+    plugin-profiling: false
+    connection-throttle: 4000
+    query-plugins: true
+    deprecated-verbose: default
+    shutdown-message: Server closed
+    minimum-api: none
+spawn-limits:
+    monsters: 70
+    animals: 10
+    water-animals: 15
+    ambient: 15
+chunk-gc:
+    period-in-ticks: 600
+ticks-per:
+    animal-spawns: 400
+    monster-spawns: 1
+    water-spawns: 1
+    ambient-spawns: 1
+    autosave: 6000
+aliases: now-in-commands.yml
diff --git a/src/main/resources/configurations/commands.yml b/src/main/resources/configurations/commands.yml
new file mode 100644
index 000000000..0f45c397d
--- /dev/null
+++ b/src/main/resources/configurations/commands.yml
@@ -0,0 +1,17 @@
+# This is the commands configuration file for Bukkit.
+# For documentation on how to make use of this file, check out the Bukkit Wiki at
+# https://www.spigotmc.org/go/commands-yml
+# 
+# If you need help on this file, feel free to join us on irc or leave a message
+# on the forums asking for advice.
+# 
+# IRC: #spigot @ irc.spi.gt
+#    (If this means nothing to you, just go to https://www.spigotmc.org/go/irc )
+# Forums: https://www.spigotmc.org/
+# Bug tracker: https://www.spigotmc.org/go/bugs
+
+command-block-overrides: []
+ignore-vanilla-permissions: false
+aliases:
+    icanhasbukkit:
+      - "version $1-"
diff --git a/src/main/resources/configurations/help.yml b/src/main/resources/configurations/help.yml
new file mode 100644
index 000000000..15c3d0707
--- /dev/null
+++ b/src/main/resources/configurations/help.yml
@@ -0,0 +1,55 @@
+# This is the help configuration file for Bukkit.
+# 
+# By default you do not need to modify this file. Help topics for all plugin commands are automatically provided by
+# or extracted from your installed plugins. You only need to modify this file if you wish to add new help pages to
+# your server or override the help pages of existing plugin commands.
+# 
+# This file is divided up into the following parts:
+# -- general-topics: lists admin defined help topics
+# -- index-topics:   lists admin defined index topics
+# -- amend-topics:   lists topic amendments to apply to existing help topics
+# -- ignore-plugins: lists any plugins that should be excluded from help
+# 
+# Examples are given below. When amending command topic, the string <text> will be replaced with the existing value
+# in the help topic. Color codes can be used in topic text. The color code character is & followed by 0-F.
+# ================================================================
+# 
+# Set this to true to list the individual command help topics in the master help.
+# command-topics-in-master-index: true
+# 
+# Each general topic will show up as a separate topic in the help index along with all the plugin command topics.
+# general-topics:
+#     Rules:
+#         shortText: Rules of the server
+#         fullText: |
+#             &61. Be kind to your fellow players.
+#             &B2. No griefing.
+#             &D3. No swearing.
+#         permission: topics.rules
+# 
+# Each index topic will show up as a separate sub-index in the help index along with all the plugin command topics.
+# To override the default help index (displayed when the user executes /help), name the index topic "Default".
+# index-topics:
+#     Ban Commands:
+#         shortText: Player banning commands
+#         preamble: Moderator - do not abuse these commands
+#         permission: op
+#         commands:
+#             - /ban
+#             - /ban-ip
+#             - /banlist
+# 
+# Topic amendments are used to change the content of automatically generated plugin command topics.
+# amended-topics:
+#     /stop:
+#         shortText: Stops the server cold....in its tracks!
+#         fullText: <text> - This kills the server.
+#         permission: you.dont.have
+# 
+# Any plugin in the ignored plugins list will be excluded from help. The name must match the name displayed by
+# the /plugins command. Ignore "Bukkit" to remove the standard bukkit commands from the index. Ignore "All"
+# to completely disable automatic help topic generation.
+# ignore-plugins:
+#    - PluginNameOne
+#    - PluginNameTwo
+#    - PluginNameThree
diff --git a/src/main/resources/log4j2.component.properties b/src/main/resources/log4j2.component.properties
new file mode 100644
index 000000000..30efeb5fa
--- /dev/null
+++ b/src/main/resources/log4j2.component.properties
@@ -0,0 +1,3 @@
+Log4jContextSelector=org.apache.logging.log4j.core.async.AsyncLoggerContextSelector
+log4j2.AsyncQueueFullPolicy="com.destroystokyo.paper.log.LogFullPolicy"
+log4j.skipJansi=true
diff --git a/src/main/resources/log4j2.xml b/src/main/resources/log4j2.xml
new file mode 100644
index 000000000..a9bb98765
--- /dev/null
+++ b/src/main/resources/log4j2.xml
@@ -0,0 +1,43 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<Configuration status="WARN" packages="com.mojang.util">
+    <Appenders>
+        <Queue name="ServerGuiConsole">
+            <PatternLayout pattern="[%d{HH:mm:ss} %level]: %msg%n" />
+        </Queue>
+        <TerminalConsole name="TerminalConsole">
+            <PatternLayout>
+                <LoggerNamePatternSelector defaultPattern="%highlightError{[%d{HH:mm:ss} %level]: [%logger] %minecraftFormatting{%msg}%n%xEx}">
+                    <!-- Log root, Minecraft, Mojang and Bukkit loggers without prefix -->
+                    <!-- Disable prefix for various plugins that bypass the plugin logger -->
+                    <PatternMatch key=",net.minecraft.,Minecraft,com.mojang.,com.sk89q.,ru.tehkode.,Minecraft.AWE"
+                                  pattern="%highlightError{[%d{HH:mm:ss} %level]: %minecraftFormatting{%msg}%n%xEx}" />
+                </LoggerNamePatternSelector>
+            </PatternLayout>
+        </TerminalConsole>
+        <RollingRandomAccessFile name="File" fileName="logs/latest.log" filePattern="logs/%d{yyyy-MM-dd}-%i.log.gz">
+            <PatternLayout>
+                <LoggerNamePatternSelector defaultPattern="[%d{HH:mm:ss}] [%t/%level]: [%logger] %minecraftFormatting{%msg}{strip}%n">
+                    <!-- Log root, Minecraft, Mojang and Bukkit loggers without prefix -->
+                    <!-- Disable prefix for various plugins that bypass the plugin logger -->
+                    <PatternMatch key=",net.minecraft.,Minecraft,com.mojang.,com.sk89q.,ru.tehkode.,Minecraft.AWE"
+                                  pattern="[%d{HH:mm:ss}] [%t/%level]: %minecraftFormatting{%msg}{strip}%n" />
+                </LoggerNamePatternSelector>
+            </PatternLayout>
+            <Policies>
+                <TimeBasedTriggeringPolicy />
+                <OnStartupTriggeringPolicy />
+            </Policies>
+            <DefaultRolloverStrategy max="1000"/>
+        </RollingRandomAccessFile>
+    </Appenders>
+    <Loggers>
+        <Root level="info">
+            <filters>
+                <MarkerFilter marker="NETWORK_PACKETS" onMatch="DENY" onMismatch="NEUTRAL" />
+            </filters>
+            <AppenderRef ref="File"/>
+            <AppenderRef ref="TerminalConsole" level="info"/>
+            <AppenderRef ref="ServerGuiConsole" level="info"/>
+        </Root>
+    </Loggers>
+</Configuration>
-- 
2.26.2

